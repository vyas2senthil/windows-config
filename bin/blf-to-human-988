#!/usr/bin/perl

use strict;
use FindBin;
use lib $FindBin::Bin;
use pretty;

my @lines;
my %images;
my $n_images;

sub debug(@) {
  print STDERR "@_\n";
}

my $image_list_started = 0;

while (<>) {
  chomp();
  s#^\s*##;
  s#\s*$##;
  s#=# = #g;
  s#\s+# #g;
  die "do not know how to handle 2 = in a line" if m/=.*=/;

  while (1) {
    s#_(.*)=# $1=# or last;
  }

  my $record_line = 1;

  if (m#^Number of Images = (\d+)#) {
    $n_images = $1;
  } elsif (m#^\s*(\d+)\s+Image\s+(.*?)\s+=\s+(.*)\s*$# and $image_list_started) {
    my ($img_idx, $img_key, $img_val) = ($1, $2, $3);

    die "invalid image idx $img_idx" if $img_idx <= 0 or $img_idx > $n_images;
    $images{$img_idx} = {} unless exists $images{$img_idx};

    die "image $img_idx\{$img_key\} already exists" if exists $images{$img_idx}{$img_key};
    $images{$img_idx}{$img_key} = $img_val;

    $record_line = 0;
  } elsif (m/Image.List/) {
    $image_list_started = 1;
  }

  if ($record_line) {
    while (1) {
      s/ (.*) =/_$1 =/ or last;
    }
    @lines = (@lines, $_);
  }

}

for (@lines) {
  print "$_\n";
}

for my $idx (keys %images) {

  my @keys = (
      "Image Size To Hash in bytes",
      "Size To CRC in bytes",
      "Partition Number",
      "Erase Size",
      "ID Name",
      "Type",
      "Load Address",
      "Flash Entry Address",
      "Path",
      "Next Image ID",
      "Image ID",
      "Enable",
      "Hash Algorithm ID",
      "Tim Included",
      );

  my %keys;
  for (@keys) {
      $keys{$_} = 1;
      die "$_ not in image key/vals for $idx" unless exists $images{$idx}{$_};
  }

  for (keys %{$images{$idx}}) {
      die "$_ not recognized" unless exists $keys{$_};
  }

  die "wrong number of image key/vals for $idx" unless keys %{$images{$idx}} == @keys;

  
  my @number_keys = (
		     "Erase Size",
		     "Load Address",
		     "Flash Entry Address",
		    );
  for (@number_keys) {
    $images{$idx}{$_} = "0" unless $images{$idx}{$_}; # in case it is empty.
    die "not valid number for $_: image $idx" unless $images{$idx}{$_} =~ m#^(0x)?[a-f0-9]+$#i;
    $images{$idx}{$_} = oct($images{$idx}{$_}) if $images{$idx}{$_} =~ /^0/;
    $images{$idx}{$_ . ".pretty"} = sprintf "%+10s", pretty($images{$idx}{$_});
    if ($images{$idx}{$_} > 0x7fffffff) {
      $images{$idx}{$_ . ".pretty"} = sprintf "0x%08x", $images{$idx}{$_};
    }
  }

  $images{$idx}{"Enable"} = $images{$idx}{"Enable"} ? " Enabled" : "Disabled";
  $images{$idx}{"Type"} = sprintf "%+5s", $images{$idx}{"Type"};
}

print "### Start of human readable image list ###\n";

my $header = "Name :   Type : FlashStart :     Memory :      Erase :  Enable? : Tim? : Algorithm :  HashBytes : CrcBytes : Partition : Path\n";
print $header;

my @header = split(":", $header);

for my $idx (sort
	     {
	       ($images{$b}{"Partition Number"} <=> $images{$a}{"Partition Number"}) * 10 +
		 ($images{$a}{"Flash Entry Address"} <=> $images{$b}{"Flash Entry Address"})
	       } keys %images) {
    my @print_keys = (
	"ID Name",
	"Type",
	"Flash Entry Address.pretty",
	"Load Address.pretty",
	"Erase Size.pretty",
	"Enable",
	"Tim Included",
	"Hash Algorithm ID",
	"Image Size To Hash in bytes",
	"Size To CRC in bytes",
	"Partition Number",
	"Path",
	);

  for my $key_n (0 .. (@print_keys - 1)) {
    my $key = $print_keys[$key_n];
    if ($key ne "Path") {
      my $width = length($header[$key_n]) - 1;
      my $format = "%$width" . "s :";
      printf $format, $images{$idx}{$key};
    } else {
      printf " %s\n", $images{$idx}{$key};
    }

  }
}
