#!/usr/bin/perl

use strict;

sub debug(@) {
    print STDERR "@_\n";
}

my $id_re = qr(\b[a-zA-Z_][a-zA-Z0-9_]*\b);
my $qualified_re = qr($id_re(?:(?:\.|\$)$id_re)*\b);

use IO::Handle;
STDOUT->autoflush(1);

while (<>) {
    chomp(my $jar = $_);
    my $file_name = $jar;
    chomp($jar = qx(readlink -f $jar));
    my $td = "/tmp/gtagsAntlrJavaParser.$$";
    system("rm -rf $td; mkdir -p $td");
    chdir $td or die "can not chdir $td";
    system("jar xf $jar");
    
    open(my $javap_pipe, "-|", "find . -name '*.class' | perl -npe 's/\\.class\$//' | xargs -d \\\\n javap") or 
	die "Can not open find pipe";

    my $class_name;
    while (<$javap_pipe>) {
	chomp;
	next if /^Compiled from.*/;

	if (m/(class|interface)\s+($qualified_re)/) {
	    $class_name = $2;
	    $class_name =~ s/\$/./g;
	    $class_name =~ s/.*\.//;
	    #print "$class_name $1 1         $file_name $_\n";
	} elsif (m/($qualified_re)\s*\(/) {
	    my $method_name = ($1 eq $class_name ? $1 : "$class_name.$1");
	    #print "$method_name method 1 $file_name $_\n";
	    $method_name =~ s/.*\.//;
	    #print "$method_name method 1 $file_name $_\n";
	} elsif (m/($qualified_re)\s*;/) {
	    my $field_name = "$class_name.$1";
	    #print "$field_name field 1 $file_name $_\n";
	} else {
	}
    }
    system("ctags-exuberant -xu --extra=+q --c-kinds=+p ~/windows-config/gcode/crossdict/src/com/baohaojun/crossdict/CrossDictActivity.java|perl -npe s!/.*\.java!$file_name!");
    print "###terminator###" . "\n";
}
# java -cp ~/bin/linux/ext/`uname -m`/gtagsAntlrJavaParser.jar:$CLASSPATH gtagsAntlrJavaParser
