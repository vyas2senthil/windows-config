#!/usr/bin/env perl

# report where we are, in which file, on which line, in what context? (in which class, function/method, etc)

# preferably it is used within Emacs, so...
# we take 2 arg, 1st is the file/buffer name, 2nd is the tab-width buffer-local variable. 
# the 2nd arg help us decide the indentation, and the context.
# then we read standard input, it should be region(0, end-of-line(point)) fed from Emacs buffer.

# output should be like: 

    # ~/src/android-nv-froyo/frameworks/base/libs/ui/EventHub.cpp:328:     while(1) {
    #    
    #     bool EventHub::getEvent(int32_t* outDeviceId, int32_t* outType,
    #         int32_t* outScancode, int32_t* outKeycode, uint32_t *outFlags,
    #         int32_t* outValue, nsecs_t* outWhen)
    #     {
    #         ...
    #
    # =>      while(1) {

# how we achieve this? 

use Encode;
use utf8;
use strict;

my $line_num = 0;
my @lines = ();
(my $file_name, my $tab_width) = @ARGV;

open(my $file, "-|", "expand -t $tab_width");

while (<$file>) {
  $line_num++;
  chomp;
  $_ = decode_utf8($_);
  push @lines, ($_);
}

@lines = reverse @lines;

$lines[0] =~ m/^\s*/;
my $spaces = length($&);

my @print_lines = ();

my $last_line = shift @lines;
push @print_lines, ("    =>  " . $last_line);

my $limit = 5;
my $outmost = 0;


my $prev_print_line_num = $line_num;
my $last_line_num = $line_num;

for (@lines) {
  $line_num--;
  if ($_ =~ m/^\s*$/) { # skip empty lines
    if ($limit < 5) {
      last;
    } else {
      next;
    }
  }

  $_ =~ m/^\s*/;
  if ($spaces > length($&) or $limit < 5) {
    if ($prev_print_line_num != $line_num+1) {
      push @print_lines, ("        " . (" " x $spaces) . "...");
    }
    $prev_print_line_num = $line_num;
    push @print_lines, ("        " . $_);
    $spaces = length($&);
  }
  if (length($&) == 0) {
    $limit--;
  }
  if ($limit == 0) {
    last;
  }
}

$,="\n";
print "    $file_name:$last_line_num: $last_line\n";
print reverse @print_lines;
