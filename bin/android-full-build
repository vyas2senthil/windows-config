#!/bin/bash

cd $(lookup_file .repo/..)
build_env=`lookup_file build/envsetup.sh`
top_dir=$(pwd)

set -e
test -d .repo -a -e build/envsetup.sh
# jobs=$(cat /proc/cpuinfo |grep '^processor'|wc -l) #default
# jobs=$((jobs + jobs / 2))
jobs=3

TEMP=$(getopt -o j: -n $(basename $0) -- "$@")
function die() {
    echo "$@"
    exit -1
}

eval set -- "$TEMP"
while true; do
    case "$1" in
	-j)
	    jobs=$2
	    shift 2
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    die "internal error"
	    ;;
    esac
done

cd $top_dir || exit
. build/envsetup.sh >/dev/null 2>&1

if test $# -gt 2; then
    die "Usage: $(basename "$0") [lunch-combo] [target]"
fi

target=all
if test $# -gt 0; then
    if lunch "$1"; then
	shift
    else
	lunch $(get_build_var TARGET_PRODUCT)-$(get_build_var TARGET_BUILD_VARIANT)
    fi
    . ~/bin/.android-set-outdir
    android-set-product
    # re-lunch, so that the ANDROID_PRODUCT_OUT can inherit from the new OUT_DIR
    lunch $TARGET_PRODUCT-$TARGET_BUILD_VARIANT
fi

if test $# -gt 0; then
    target=$1
fi

(
    set -x;
    set -e
    test -d "$ANDROID_PRODUCT_OUT"
    cd "$ANDROID_PRODUCT_OUT"
    rm ../system.img ../obj/PACKAGING/systemimage_intermediates/system.img -vf
    rm kernel telephony uboot-obm -rf    
) || true

test -e buildspec.mk || { echo no buildspec.mk, will exit now; exit; }

(
    time (
        if pwd | grep -P -e '\d+-\d+'; then
            echo looks like a rolling back build dir, do not do code reading in it
        else
	    touch .for-code-reading
        fi
	echo 'about to lock at '$(date)
	flock 9 || { echo 'lock failed at '$(date); exit -1; }
	echo 'lock success! at '$(date)
	(
	    echo "before build, ccache stat is $(./prebuilt/linux-x86/ccache/ccache -s)"
            if test -e .afb-do-repo-changes; then
	        echo "external dirs not managed by repo: $(repo-external)"
	        echo "changed repos are: $(repo-changes\?)"
            fi
	)&
	rm */out/ -rf || true
        
        if test -e /usr/bin/ccache; then
            ln -sf /usr/bin/ccache prebuilt/linux-x86/ccache/ccache
        fi
	result=''
	if test "$target" = all; then
            export build_mount_p=$(readlink -f ../)/.afb
            mkdir -p $build_mount_p
            test "$(find $build_mount_p -maxdepth 1 | wc -l)" = 1
            time sudo unshare -m -- bash -c '
                set -ex
                mount $(pwd) '$build_mount_p' -o bind;
                cd '$build_mount_p'
                su bhj -c "
                    . ~/.bashrc;
                    . .buildenv.sh;
                    make -j'$jobs' -l '$jobs' -k droid telephony uboot obm
                "
            ' && result=$result'all ok; '
	fi
	if [[ "$target" =~ kernel ]]; then
	    command time make -k kernel && result=$result'kernel ok; '
	fi
	
	if [[ "$target" =~ system ]]; then
	    command time make -j$jobs -l$jobs -k && result=$result'android ok; '
	fi
	if [[ "$target" =~ misc ]]; then
	    command time make -k telephony uboot obm && result=$result'misc ok; '
	fi
	(
	    cd flashing
	    ./make-links.sh
	    dest=$(android-env get_abs_build_var OUT_DIR)/flashing/
	    mkdir -p $dest
	    DO_SYMLINK=true ./copy-release.sh $dest
	) || true
	echo -n 'after build, ccache stat is '
	./prebuilt/linux-x86/ccache/ccache -s
	echo 
	echo "full build result is $result"
	echo
        echo "$result" | grep -q -e "all ok" # make sure it exit with the right return value
    )
) 9>.android-full-build.lock  2>&1 | tee build.log out/build.log

grep 'full build result is' build.log | grep -q -e "all ok" # make sure it exit with the right return value
