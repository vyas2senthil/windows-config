#!/bin/bash

cd $(lookup_file .repo/..)
build_env=`lookup_file build/envsetup.sh`
top_dir=$(pwd)

set -e

if test -e .afbrc; then
    . .afbrc
fi

if test "$hourly_build_debug" = true; then
    if test -e .patch_applied; then
        echo "Error: pateches applied"
        exit -1;
    else
        echo "Error: patches not applied"
        exit 0;
    fi
fi

test -d .repo -a -e build/envsetup.sh
# jobs=$(cat /proc/cpuinfo |grep '^processor'|wc -l) #default
# jobs=$((jobs + jobs / 2))
jobs=3

TEMP=$(getopt -o j: -n $(basename $0) -- "$@")
function die() {
    echo "$@"
    exit -1
}

eval set -- "$TEMP"
while true; do
    case "$1" in
	-j)
	    jobs=$2
	    shift 2
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    die "internal error"
	    ;;
    esac
done

cd $top_dir || exit
. build/envsetup.sh >/dev/null 2>&1

if test $# -gt 1; then
    die "Usage: $(basename "$0") [lunch-combo]"
fi

if test $# -gt 0; then
    if lunch "$1"; then
	shift
    else
	lunch $(get_build_var TARGET_PRODUCT)-$(get_build_var TARGET_BUILD_VARIANT)
    fi
    . ~/bin/.android-set-outdir
    android-set-product
    # re-lunch, so that the ANDROID_PRODUCT_OUT can inherit from the new OUT_DIR
    lunch $TARGET_PRODUCT-$TARGET_BUILD_VARIANT
fi

set -x;
(
    set -e
    test -d "$ANDROID_PRODUCT_OUT"
    cd "$ANDROID_PRODUCT_OUT"
    test -d .repo && die "can not do it; .repo means we are at android top."
    rm ../system.img ../obj/PACKAGING/systemimage_intermediates/system.img -vf
    rm kernel telephony uboot-obm -rf    
) || true

test -e buildspec.mk || { echo no buildspec.mk, will exit now; exit; }

(
    time (
        if pwd | grep -P -e '\d+-\d+'; then
            echo looks like a rolling back build dir, do not do code reading in it
        else
	    touch .for-code-reading
        fi
	echo 'about to lock at '$(date)
	flock 9
	echo 'lock success! at '$(date)
	rm */out/ -rf || true
        if test "$DO_REPO_UPDATE" = true; then
            rm out/*/ -rf || true
        fi        
	result=''
        export build_mount_p=$(readlink -f ../)/.afb
        mkdir -p $build_mount_p
        test "$(find $build_mount_p -maxdepth 1 | wc -l)" = 1
        time sudo env NO_PARALLEL_BUILD=$NO_PARALLEL_BUILD unshare -m -- bash -c '
            set -ex
            mount $(pwd) '$build_mount_p' -o bind;
            cd '$build_mount_p'
            su '$(whoami)' -c "
                . ~/.bashrc;
                . .buildenv.sh;
                if test -e .buildenv.sh.x; then
                    set -x
                    . .buildenv.sh.x
                fi
                if test -z "$NO_PARALLEL_BUILD"; then
                    make -j'$jobs' -l '$jobs' -k droid telephony uboot obm \$AFBV
                elif test -e flashing/quilt/$(repo-tracking)/do-no-parallel-build; then
                    bash flashing/quilt/$(repo-tracking)/do-no-parallel-build
                else
                    bash flashing/quilt/do-no-parallel-build
                fi
            "
        ' && result=$result'all ok; '
	(
	    cd flashing
	    ./make-links.sh
	    dest=$(android-env get_abs_build_var OUT_DIR)/flashing/
	    mkdir -p $dest
	    DO_SYMLINK=true ./copy-release.sh $dest
	) || true
        if test -e .afb-do-repo-changes; then
	    echo -n 'after build, ccache stat is '
	    ./prebuilt/linux-x86/ccache/ccache -s
        fi
	echo 
	echo "full build result is $result"
	echo
    )
) 9>.android-full-build.lock  2>&1 | tee build.log out/build.log

grep -Hn -e 'full build result is' build.log | grep -e "all ok" # make sure it exit with the right return value
