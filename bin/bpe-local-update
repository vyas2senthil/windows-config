#!/bin/bash

set -e
BPE_ON_APSE=
blu_rebase=
TEMP=$(getopt -o r --long rebase -n $(basename $0) -- "$@")
eval set -- "$TEMP"
while true; do
    case "$1" in
	-r|--rebase)
	blu_rebase=true
	shift
	;;
	--)
	shift
	break
	;;
	*)
	die "internal error"
	;;
    esac
done

if set -o|grep xtrace.*on -q; then
    bashx='bash -x'
    gq() {
	bash -x gq "$@"
    }
else
    bashx=
fi

function die() {
    echo "$@"
    exit -1
}

if test $# = 1 -o ! -d .repo; then
    args=flashing/quilt/$(repo-path)/series
else
    cd $(lookup_file .repo/..)
    args=$(find flashing -type f -name series | grep -v -e '\.git')
fi

cd $(lookup_file .repo/..)

for x in $args; do
    (
	proj=$(dirname $x | perl -npe 's,^flashing/quilt/,,')
	patch_dir=$(pwd)/$(dirname $x)
	export git_base=$(cat $patch_dir/.base)
	export git_result=$(cat $patch_dir/.result)
	
	log=$(pwd)/out/bpe-build-local/$(today)-$(echo $proj|perl -npe 's,/,-,g');
	mkdir -p $(dirname $log)
	rm $log-*
	(
	    set +e
	    cd $proj
	    if test "$(git rev-parse $(repo-remote)/$(repo-branch))" != "$git_base"; then
		git log $git_base..$(repo-remote)/$(repo-branch) > $log-upstream-updated
	    fi
	    
	    local_url=$(repo-remote-url|perl -npe 's,.*:/git/android/,bibler:shgit/,')
	    
	    bpe_local=$(git symbolic-ref bpe-local 2>/dev/null)
	    if test -z "$bpe_local"; then
		die "error: bpe_local symbolic ref not set up"
	    fi
	    bpe_local=$(basename $bpe_local)
	    git fetch $local_url refs/heads/$bpe_local:refs/local/$bpe_local
	    
	    if test "$(git rev-parse bpe-local)" != "$git_result"; then
		git log $git_result..bpe-local > $log-downstream-updated
	    fi

	    qx=quilt-$(now|perl -npe 's/:/-/g') #the quilt/guilt branch for working on
	    git branch -D $qx || true # to make sure
	    git co -b $qx $git_base
	    git reset --hard $git_base
	    git clean -xfd
	    gq init
	    cp $patch_dir/* .git/patches/$qx/
	    gq push -a
	    if test -z "$blu_rebase"; then
		echo Will now start a new shell
		start-recursive-shell quilt rebase
		exit
	    fi

	    if test "$(git rev-parse $(repo-remote)/$(repo-branch))" != "$git_base"; then
		gq rebase $(repo-remote)/$(repo-branch) ||
		touch $log-gq-rebase-failed
	    fi
	    cp .git/patches/$qx/* $patch_dir/
	    rm $patch_dir/status
	    (
		cd $patch_dir
		git st -s . |grep . && 
		touch $log-patches-rebased
	    )

	    git diff --quiet bpe-local || git diff bpe-local > $log-patches-obsolete
	    
	)
    )
done
