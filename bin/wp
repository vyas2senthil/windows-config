#!/bin/bash


if test "$(basename -- "$BASH_SOURCE")" = "$(basename -- "$0")"; then # we are being executed

# redefine these functions
    function swp()
    {
        if [[ "$FILE" =~ ~/smb/ ]]; then
            FILE=`echo "$FILE"|perl -npe 's,^.*?/smb/,\\\\\\\\,; s,/,\\\\,g'`
	    host=$(echo "$FILE" | perl -npe 's,^..(.*?)\\.*,$1,')
	    path=$(echo "$FILE" | perl -npe 's,^..(.*?)(\\.*),$2,')
	    FILE=$(printf '\\\\%s%s' $(ip-or-name $host) $path)		
        elif [[ "$FILE" =~ ^// ]]; then
	    FILE=`echo "$FILE"|perl -npe 's,/,\\\\,g'`
	else
            FILE=z:$FILE
        fi
        echo -n "$FILE"
    }

    function sup()
    {
        if [[ "$FILE" =~ ~/smb/ ]]; then
            FILE=`echo "$FILE"|perl -npe 's,^.*?/smb/,smb://,g'`
        else
            FILE=z:$FILE
        fi
        printf %q "$FILE"
    }

    function ap()
    {
        relative-path "$FILE" $(readlink -f $(lookup_file .repo/..))/
    }
    
    function gitp()
    {
        relative-path "$FILE" $(readlink -f $(dirname "$(lookup_file .git)"))/
    }

    function absp()
    {
        if test "${FILE:0:1}" = /; then
            echo $FILE
        else
            echo $(pwd)/$FILE
        fi
    }

    function wp()
    {
        FILE=z:$FILE
        echo -n "$FILE"|perl -npe 's,/,\\,g'
    }

    function realp()
    {
        readlink -f "$FILE"
    }

    function up()
    {
        printf %q "$FILE" | perl -npe 's#^$ENV{HOME}(/|$)#~$1#'
    }

    function mp() #mail path
    {
	case $(uname) in
	    CYGWIN*)
		wlp "$FILE"
		;;
	    *)
		echo -n "$FILE"
		;;
	esac
    }

    function tmp() #tramp mail path
    {

        echo -n "/scp:`whoami`@$LOCALIP:$FILE"
    }

    export FILE=${1:-`pwd`}
    export FILE=$(lookup_file "$FILE")

    out=$($(basename -- $0) "$@")
    echo "$out"
    if test "$NO_PUTCLIP" = true; then
        return
    fi

    if is-in-emacs || is-tty-io; then
        echo "$out" | putclip
    fi
else # we are being sourced
    for x in swp sup gitp wp ap up mp tmp realp; do 
        eval 'function '$x'() {
            command '$x' "$@" || { renew-xauth; command '$x' "$@"; }
            if test "$NO_PUTCLIP" = true; then
                return
            fi
            FILE=${1:-`pwd`}
            FILE=`lookup_file "$FILE"`
            history -s '$x' "$(printf %q "$FILE")"
        }'
    done
fi
