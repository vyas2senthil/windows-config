#!/bin/bash

unset subject
unset body
unset attachment

declare -a to
declare -a cc
declare -a bcc

unset n_to
unset n_cc
unset n_bcc

need_comma=false
edit=false

test=false
IFS=$'\n'

prog_name="`basename \"$0\"`"

function check_arg()
{
    if [[ -z "$1" ]]
    then
        Usage;
    fi
}

function Usage()
{
    echo "Usage: $prog_name [recipient]... OPTIONS"
    echo 
    echo "Main Options:"
    echo "    -h:                 this little help"
    echo "    -c cc_recipient:    cc to somebody"
    echo "    -b bcc_recipient:   bcc to somebody"
    echo "    -s subject:         subject"
    echo "    -a file:            attachment"
    echo "    -af file:           read attachment list from file"
    echo "    -e:                 edit it using emacs"
    echo "    -test:              test mode, don't start the GUI"
    exit
}

while true; do 
    case "$1" in
        [^-]*)
            to[$n_to]="$1"
            ((n_to++))
            shift
            ;;
        -h)
            Usage
            shift
            ;;
        -s)
            check_arg "$2"
            subject="$2"
            shift
            shift
            ;;
        -c)
            check_arg "$2"
            cc[$n_cc]="$2"
            ((n_cc++))
            shift
            shift
            ;;
        -b)
            check_arg "$2"
            bcc[$n_bcc]="$2"
            ((n_bcc++))
            shift
            shift
            ;;
        -a)
            check_arg "$2"
            if [[ -z "$attachment" ]]; then
                attachment=file:///`cygpath -alw "$2"`
            else #the " char will never occur in windows filename
                attachment="$attachment"'"'file:///`cygpath -alw "$2"`
            fi
            shift
            shift
            ;;
        -af)
            check_arg "$2"
            for x in `cat "$2"`
            do
                if [[ -z "$attachment" ]]; then
                    attachment=file:///`cygpath -alw "$x"`
                else
                    attachment="$attachment"'"'file:///`cygpath -alw "$x"`
                fi
            done
            shift
            shift
            ;;
        -e)
            edit=true
            shift
            ;;
        -test)
            test=true;
            shift
            ;;

        *)
            break
            ;;
    esac
done


if false; then
echo "to is ${to[@]}"
echo "attachment is ${attachment[@]}"
echo "subject is $subject"
echo "cc is ${cc[@]}"
echo "bcc is ${bcc[@]}"
echo "body is $body"
fi


function build_mailto_recipients() 
{
    cd ~/.mail.addr
    
    echo -n "'"
    local IFS=$'\n'
    local recipients=$(
        for x in "$@"
        do
            if [[ -f "$x" ]]
            then
                cat "$x" 
            else 
                if [[ -d "$x" ]]
                then
                    cat "$x"/*
                else
                    echo '<'"$x"'>'|perl -npe 's/>+/>/g; s/<+/</g'
                fi
            fi
        done
        )
    echo -n "$recipients"|tr -d '\n'|perl -npe 'chomp; s/^\s*//; s/>\s*/>,/g; s#,$##'
    echo -n "'"
}
  
function build_mailto_attachments()
{
    echo -n "'"
    echo "$1"|
    perl -npe 'chomp; s#\\#/#g; s#([^\-0-9a-zA-Z/.:"])#sprintf("%%%02x", ord($1))#seg; s#"#,#g'
    echo -n "'"

}

function output_comma() {
    if [[ $need_comma == true ]]; then
        echo -n ,
    fi
}

function set_need_comma() {
    need_comma=true
}

function compose_body() {
    local mfile=`mktemp`
    gnuclient.exe "`cygpath -alw $mfile`" >/dev/null 2>&1
    #the `,' and `"' characters is special, replace them with the %xx notation 
    cat $mfile|sed -e 's/,/%2c/g; s/"/%22/g'
    rm $mfile
}

function build_command_line()
{
    local IFS=$'\n'

    echo -n thunderbird -compose ' '
    echo -n '"'

    if ! [[ -z "${to[*]}" ]]; then
        output_comma
        echo -n to=$( build_mailto_recipients "${to[@]}" )
        set_need_comma
    fi

    if ! [[ -z "${cc[*]}" ]]; then
        output_comma
        echo -n cc=$( build_mailto_recipients "${cc[@]}" )
        set_need_comma
    fi

    if ! [[ -z "${bcc[*]}" ]]; then
        output_comma
        echo -n bcc=$( build_mailto_recipients "${bcc[@]}" )
        set_need_comma
    fi

    if ! [[ -z "$attachment" ]]; then
        output_comma
        echo -n attachment=$( build_mailto_attachments "$attachment" )
        set_need_comma
    fi
    
    if ! [[ -z "$subject" ]]; then
        output_comma
        echo -n subject="$subject"
        set_need_comma
    fi
    
    if [[ $edit == true ]]; then
        output_comma
        echo -n body=
        compose_body
        set_need_comma
    fi
    echo -n '"'
}

command_line=$( build_command_line )


if [[ $test == false ]]; then
    echo "$command_line"|sh
else
    echo "$command_line"
fi


