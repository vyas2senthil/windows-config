#!/bin/bash

function calc_relative() {
    local source=$1
    local target=$2/

    source=$(echo "$source"|perl -npe 's,/+,/,g')
    source=$(lookup_file "$source")

    while [[ "$source" =~ /./ ]]; do
	source=$(echo "$source" | perl -npe 's,/\./,/,g')
    done

    while [[ "$source" =~ /../ ]]; do
	source=$(echo "$source" | perl -npe 's,(^|[^/]+)/\.\./,/,g')
    done

    perl -e '
($s, $t)  = @ARGV;
@s = split("", $s);
@t = split("", $t);

$n = 0;
$last_slash = 0;
while (@s and @t) {
    if ($s[0] eq $t[0]) {
        $n ++;
        $last_slash = $n if $s[0] eq "/";
        shift @s;
        shift @t;
    } else {
        last;
    }
}

$relative_s = substr($s, $last_slash);
$remaining_t = substr($t, $last_slash);

$remaining_t = grep(m:/:, split("", $remaining_t));
$relative_s = "../" x $remaining_t . $relative_s;
print "$relative_s";
' "$source" "$target"
}

function die() {
    echo "$@"
    exit -1
}

if test $# = 1; then
    set -- "$@" .
fi

args=("$@")
n_targets=$#
((n_targets--))

target=${args[$#-1]}

target=$(readlink -f "$target")
if (($# > 2)) && test ! -d "$target"; then
    die "ln: target \`Android.mk' is not a directory"
fi

test -f "$target" && target=$(dirname "$target")
test -e "$target" || die "ln: target \`$target does not exist"

for x in $(seq 1 $n_targets); do
    source=${args[$x-1]}
    relative_source=$(calc_relative "$source" "$target")
    echo 1>&2 "$relative_source" =\> "$source"
    ln -s -- "$relative_source" "$target"/
done
    
