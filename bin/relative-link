#!/bin/bash

function calc_relative() {
    local source=$(formal-path "$1")
    local target=$2

    perl -e '
($s, $t)  = @ARGV;
@s = split("", $s);
@t = split("", $t);

$n = 0;
$last_slash = 0;
while (@s and @t) {
    if ($s[0] eq $t[0]) {
        $n ++;
        $last_slash = $n if $s[0] eq "/";
        shift @s;
        shift @t;
    } else {
        last;
    }
}

$relative_s = substr($s, $last_slash);
$remaining_t = substr($t, $last_slash);

$remaining_t = grep(m:/:, split("", $remaining_t));
$relative_s = "../" x $remaining_t . $relative_s;
print "$relative_s";
' "$source" "$target"
}

function die() {
    echo "$@"
    exit -1
}

target_file=''

test $# = 0 && die "ln: missing file operand"

if test $# = 1; then
    set -- "$@" ./"$(basename "$1")"
fi

args=("$@")
n_targets=$#
((n_targets--))

target_dir=${args[$#-1]}

if (($# > 2)) && test ! -d "$target_dir"; then
    die "ln: target_dir \`$target_dir' is not a directory"
fi

if test $# = 2; then
    if test -d "$target_dir"; then
	{ target_file=$(basename "$1"); }
    else
	{ target_file=$(basename "$target_dir"); target_dir=$(dirname "$target_dir"); }
    fi
fi

test -e "$target_dir" || die "ln: target_dir \`$target_dir does not exist"

old_target_dir=$target_dir;
target_dir=$(formal-path "$target_dir"|perl -npe 's,/*$,,')

echo -n > ~/.failed-rln

target_file_save=$target_file
for x in $(seq 1 $n_targets); do
    source=${args[$x-1]}
    if test -z "$target_file_save"; then
	target_file=$(basename "$source")
	rm -f "$target_dir"/"$target_file"
    fi
    normal_target=$(formal-path "$target_dir"/"$target_file")
    relative_source=$(calc_relative "$source" "$normal_target")
    # if test -z "target_file"; then
    # 	echo 1>&2 "$old_target_dir"/"$(basename "$relative_source")" =\> "$relative_source"
    # else
    # 	echo 1>&2 "$old_target_dir"/"$target_file" =\> "$relative_source"
    # fi
    ln -s -- "$relative_source" "$target_dir"/"$target_file" || printf "ln -sf -- %q %q\n" "$relative_source" "$target_dir"/"$target_file" >> ~/.failed-rln
done
    
