#!/usr/bin/env perl
use String::ShellQuote;
use strict;

open (my $log_, ">", glob("~/.logs/edit.log")) or die "Can not open log file";
print $log_ "@ARGV\n";
sub debug(@) {
    print $log_ "@_\n";
}


if ($ARGV[0] =~ m/^\+\d+$/) {
  my $line = substr($ARGV[0], 1);
  shift @ARGV;
  $ARGV[0] .= ":$line";
}

my ($myfile) = ($ARGV[0]);
my $remote_ip = $ENV{"REMOTEIP"};

my $protocol = "";
if ($remote_ip) {
  $protocol = qx(get-remote-edit-protocol $remote_ip);
}


my @emacsclient = ('emacsclient', '-n');

if ($0 =~ m,/?edit-wait$, or $0 =~ m,/?ew$,) {
  @emacsclient = ('emacsclient');
}

sub get_emacs_file_name($) {
  my ($file) = @_;
  if ($ENV{"REMOTEIP"}) {
    my ($myname, $myip, $myport, $remote_ip) = @ENV{"WHOAMI", "LOCALIP", "LOCALPORT", "REMOTEIP"};
    if ($protocol eq "pscp") {
      # plink on win7 has a bug, can't handle ip connection, only hostname
      # works
      $myip = qx(ip-hosts $myip);
    }

    if ($myport eq "22") {
      return "/$protocol:$myname\@$myip:$file"; 
    } else {
      return "/$protocol:$myname\@$myip#$myport:$file"; 
    }
  } else {
    return $file;
  }
}

sub edit_1($)
  {
    my $file=$_[0];
    $file =~ s,.*file://,,;

    if (-e $file) {

	my $file_q = $file = shell_quote($file);
	chomp($file_q = qx(lookup_file -e -- $file));
	if (not $file_q) {
	    chomp ($file_q = qx(lookup_file -- $file));
	}
	debug "file_q is $file_q";
	return (@emacsclient, get_emacs_file_name($file_q));

    } else {

      # external/opencore/android/mediascanner.cpp:622: error: invalid conversion from ‘const char*’ to ‘char*’  
      $file =~ m,^[a|b]/, and $file = substr($file, 2); # for git diff output
      $file =~ m,:$, and chop($file);

      my $line=1;
      $file =~ s,:(\d+)$,, and $line = $1;

      if (`uname` =~ m/cygwin/i) {
	$file = shell_quote($file);
	$file = `cygpath -u $file`;
	chomp($file);
      }

      my $file_q = $file = shell_quote($file);
      chomp($file_q = qx(lookup_file -e -- $file|head -n 1));
      if (not $file_q or not -e $file_q) {
	  chomp($file_q = qx(lookup_file -- $file|head -n 1));
      }
      return (@emacsclient, "+$line", get_emacs_file_name($file_q));

    }
  }

if ($remote_ip) {
  my @cmd = edit_1($myfile);
  $cmd[-1] = shell_quote($cmd[-1]);

  my $ssh_cmd = join(" ", @cmd);

  $ssh_cmd = <<EOC;
if test `uname` != Linux; then
    psexec.exe -sid "\$(cygpath -alw "\$(which findexec)")" -t emacs@
fi
$ssh_cmd
EOC
  $ssh_cmd = shell_quote($ssh_cmd);
  print "ssh $remote_ip $ssh_cmd";
  exit(system("ssh $remote_ip $ssh_cmd"));
} else {
  my @cmd = edit_1($myfile);
  print "will run: ";
  for (@cmd) {
    print "'$_' ";
  }
  print "\n";
  exit(system(@cmd));
}
