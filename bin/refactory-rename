#!/bin/bash
set -e
# set -- "$(printf %q "$1")" "$(printf %q "$2")"
arg1="$(printf %q "$1")"
arg2="$(printf %q "$2")"

function die() {
    echo "$@"
    exit 1
}

function debug() {
    echo "$@" 1>&2
}

IFS=$'\n'

function get-files-r() {
    find . -name '.git' -prune -o -type f -print | perl -npe 's#^\./##';
}

function get-files-this-dir() {
    find . -maxdepth 1 -name '.git' -prune -o -print | perl -npe 's#^\./##' | grep -v -P -e '^\.$';
}

git status -s . | grep -v -P -e '^M ' | grep -P -e '^.\S' && die "git not clean:
$(git status . )"

test $# = 0 && die "must provide at least 2 args"
tmpf=/tmp/$(basename $0).$$
perlhash=$tmpf.hash
get-files-r > $tmpf
echo shit > $tmpf.tmp
cat $tmpf |
xargs -d \\n grep -P -l -i -I -e "$1" |
xargs -d \\n bash -c 'for x in "$@"; do test -f "$x" -a ! -L "$x" && echo "$x"; done; echo '$tmpf.tmp true |
xargs -d \\n perl -npe '
BEGIN{
    $from = "'"$arg1"'";
    $to = "'"$arg2"'";
}

$rep_save{$from} = $to;
$rep_save{lc $from} = lc $to;
$rep_save{uc $from} = uc $to;
$rep_save{ucfirst lc $from} = ucfirst lc $to;

while (m#('"$arg1"')#ig) {
    if (defined $rep_save{$1}) {
        next;
    } else {
        system("echo please input your replacement for \"$1\" > /tmp/get-stdin.$$");
        chomp($rep_save{$1} = qx(get-stdin /tmp/get-stdin.$$));
    }
}

for $key (keys %rep_save) {
    my ($from, $to) = ($key, $rep_save{$key});
    s/$from/$to/g;
}

END {
    use Storable;
    store \%rep_save, "'$perlhash'";
}
' -i
        
function compute-new-string() {
echo "$@"|perl -npe '
BEGIN{
    use Storable;
    %rep_save = %{retrieve("'$perlhash'")};
}

for $key (keys %rep_save) {
    my ($from, $to) = ($key, $rep_save{$key});
    s/$from/$to/g;
}
'
}

function rename-files() {
    dir=$1
    shift
    (
	cd "$dir";
	debug doing $(pwd)
	for x in $(get-files-this-dir); do
	    if test -d "$x"; then
		test -L "$x" || rename-files "$x" "$@"
	    fi
	    if echo "$x"|grep -P -q -i -e "$1" || readlink "$x" | grep -P -q -i -e "$1"; then
		debug doing "$x"
		y="$(compute-new-string "$x")"

                if test -L "$x"; then
                    new_link=$(compute-new-string "$(readlink "$x")")
                    git rm "$x" --cached
                    rm "$x"
                    ln -s "$new_link" "$y"
                    git add "$y"
                else
                    git mv "$x" "$y"
                fi
                    
	    fi
	done
    )
}
	    
rename-files . "$@"
