#!/bin/bash

export PATH=$(dirname "$(readlink -f "$0")"):$PATH


# part   0::attr 0::         tim  start 0x00000000, size 0x00040000
# part   1::attr 0::         obm  start 0x00040000, size 0x00040000
# part   2::attr 0::       uboot  start 0x00080000, size 0x00080000
# part   3::attr 0::     ramdisk  start 0x00100000, size 0x00040000
# part   4::attr 0::        imei  start 0x00140000, size 0x00040000
# part   5::attr 0:: arbelbinary  start 0x00180000, size 0x00700000
# part   6::attr 0::   msabinary  start 0x00880000, size 0x00100000
# part   7::attr 0::      kernel  start 0x00980000, size 0x00400000
# part   8::attr 0:: maintenance  start 0x00d80000, size 0x00400000
# part   9::attr 0::    recovery  start 0x01180000, size 0x00500000
# part  10::attr 0::        misc  start 0x01680000, size 0x00040000
# part  11::attr 1::       cache  start 0x016c0000, size 0x05140000
# part  12::attr 1::      system  start 0x06800000, size 0x0a000000
# part  13::attr 1::    userdata  start 0x10800000, size 0x0d800000
# part  14::attr 0::        logo  start 0x1e000000, size 0x00340000
# part  15::attr 0::         env  start 0x1e340000, size 0x00080000
# part  16::attr 0::      kpanic  start 0x1e3c0000, size 0x00040000
# part  17::attr 0::         nvm  start 0x1e400000, size 0x00800000
# part  18::attr 1::   telephony  start 0x1ec00000, size 0x00800000
# part  19::attr 0::    reserved  start 0x1f400000, size 0x00c00000

set -e
test -e system.img || cd $(lookup_file flashing)
function die() {
    echo "$@"
    exit -1
}

if test $# != 1 -o ! -e $1; then
    die "Usage: $(basename $0) XXX.blf"
fi


export blf=$1

# product=$(fastboot getvar product 2>&1 | grep product: | pn 2)
# if test "$product.blf" != $(basename $blf); then
#     die "You are trying to flash product '$product' with $(basename $blf), it is not allowed!"
# fi

function do-partition() {
    fastboot erase $1;
    fastboot flash $1 ${2:-$1.img}
}

function do-partition-sparse() {
    fastboot erase $1
    fastboot oem onfly $1
    mkdir -p ~/tmp/
    tmpf=~/tmp/$(basename $2).raw
    simg2img $2 $tmpf
    fastboot flash $1 $tmpf
}

function get-image-path() {
    get-blf-img-val $blf $1 Path
}

# $for x in $(seq 1 16); do echo $(get-blf-img-val *.blf $x 'ID Name') $(get-blf-img-val *.blf $x Path);  done
# TIMH PXA920_NTIM.bin
# OBMI TTC2_Sultan_Loader_3_2_13_LINUX.bin
# PXAY pxafs.img
# USRY userdata.img
# SYSY system.img
# RCOV ramdisk-recovery.img
# MNTN uImage-mt
# ZIMG uImage
# RAMD ramdisk.img
# GRBI TTC1_M05_AI_A1_Flash.bin
# ARBI Arbel_DIGRF3.bin
# OSLO u-boot.bin
# RBLI ReliableData.bin
# PLGO logo.bin
# PMCE prdcfg.bin
# ERAN panic.part

do-partition uboot "$(get-image-path OSLO)"
do-partition ramdisk "$(get-image-path RAMD)"
do-partition kernel "$(get-image-path ZIMG)"
do-partition tdCp "$(concat-file 0 ARBI 7M GRBI 10M GRB2)"
do-partition recovery "$(concat-file 0 OSLR 1M ZIMR 5M RAMR)"

fastboot erase misc
fastboot erase Cache

do-partition-sparse system "$(get-image-path SYSY)"
do-partition-sparse userdata "$(get-image-path USRY)"
do-partition logo "$(get-image-path PLGO)" || true
fastboot erase tdNvm
do-partition tdTelephony "$(get-image-path PXAY)"
do-partition GPT "$(get-image-path PGPT)"
do-partition DTIM $(concat-file 0 DTim.Primary 512K DTim.Recovery)
do-partition OBM $(concat-file 0 ntim_emmc.bin 4K "$(get-image-path OBMI)")

read -p "Press enter to restart fastboot "
fastboot reboot
