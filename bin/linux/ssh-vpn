#!/usr/bin/env perl

#!/usr/bin/env perl

use Expect;
use strict;
use IO::Pty;

my $shucks;

sub do_ssh($$$) {
  (my $username, my $password, my $host) = @_;

  my $spawn = new Expect;
  $spawn->raw_pty(1);  

  # This gets the size of your terminal window
  $spawn->slave->clone_winsize_from(\*STDIN);

  my $PROMPT;

  # This function traps WINCH signals and passes them on
  sub winch {
    my $signame = shift;
    my $pid = $spawn->pid;
    $shucks++;
    print "count $shucks,pid $pid, SIG$signame\n";
    $spawn->slave->clone_winsize_from(\*STDIN);
    kill WINCH => $spawn->pid if $spawn->pid;
  }

  $SIG{WINCH} = \&winch;        # best strategy

  $spawn=Expect->spawn("ssh -C2qN -D 8080 $username\@$host");
  # log everything if you want
  # $spawn->log_file("/tmp/autossh.log.$$");

  my $PROMPT  = '[\]\$\>\#]$';
  my $ret = $spawn->expect(10,
                           [ qr/\(yes\/no\)\?\s*$/ => sub { $spawn->send("yes\n"); exp_continue; } ],
                           [ qr/assword:\s*$/ 	=> sub { $spawn->send("$password\n"); exp_continue; } ],
                           [ qr/ogin:\s*$/		=> sub { $spawn->send("$username\n"); exp_continue; } ],
                           [ qr/REMOTE HOST IDEN/ 	=> sub { print "FIX: .ssh/known_hosts\n"; exp_continue; } ],
                           [ qr/$PROMPT/ 		=> sub { $spawn->send("echo Now try window resizing\n"); } ],
                          );
    
  # Hand over control
  $spawn->interact();
}

while (1) {
  my $page = qx(wget http://vpn.tl/free/ssh/ -O -);
  #        </thead>        <tbody> <tr><td>sshtl</td><td>adMuwE02</td><td>ssh1.ssh.tl</td><td>2010-07-05,09:00</td><td>30分钟更新密码,30分钟断线</td></tr>
  $page =~ m,<tr><td>(.*?)</td><td>(.*?)</td><td>(.*?)</td>.*30分钟更新,;
  #$page =~ m,免费账号: (.*?) 密码: (.*)<br/>, or 
      #$page =~ m,.*value="(.*?)".*value="(.*?)",s;

  print "$1\@$3, password is $2\n";
  
  my $username = $1;
  my $password = $2;
  my $host = $3;
  do_ssh($username, $password, $host);
}
