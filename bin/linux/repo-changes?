#!/bin/bash

if test $(basename $0) = repo-not-clean; then
    export DO_GIT_ST_ONLY=true
fi

export GIT_END_DATE=
TEMP=$(getopt -o e: --long end: -n $(basename $0) -- "$@")
eval set -- "$TEMP"
while true; do
    case "$1" in
	-e|--end)
	    export GIT_END_DATE=$(day-end $2)
	shift 2
	;;
	--)
	shift
	break
	;;
	*)
	die "internal error"
	;;
    esac
done

if test $# = 0 -a ! -d .repo; then
    set -- $(repo-top)/$(repo-path)
fi

set -- $(
    for x in "$@"; do
	echo -d "$x"
    done
)

my-rfa -j 4 "$@" -- '
#{%sh%}
if test "$DEBUG" = true; then
    set -x
fi
set -- $($REPO_INFO remote branch path)
remote=$1
branch=$2
path=$3
if test ${#branch} = 40; then
    remote_rev=$branch
else
    remote_rev=$(git rev-parse $remote/$branch)
fi

# function git()
# {
#     command git "$@" || 
#     {
#         echo git "$@" failed at $(pwd);
#     } 1>&2
# }
# export -f git

if test -z "$GIT_END_DATE"; then
    rev=$(git rev-parse $remote_rev)
else
    rev=$(git log --until="$GIT_END_DATE" -1 $remote_rev|head -n 1|pn 2)
fi

if git status -s |grep -q .; then
    (
        if test -e "$(git config core.excludesfile)"; then
            exc_file=$(git config core.excludesfile)
        else
            exc_file=/dev/null
        fi
        for file in $(git status -s | pn 2); do
            if ! grep -e "^$file\$" -q -- "$exc_file"; then
                flock -x 10;
                echo $path repo not clean: $file;
                break
            fi
        done
    )
fi

head_rev=$(git rev-parse HEAD)

if test "$DO_GIT_ST_ONLY" != true -a "$head_rev" != "$rev"; then
    need_bail=true

    if test -e $ANDROID_TOP/flashing/quilt/$(repo-tracking)/$path/series; then
        if test "$(git rev-parse HEAD"~$(gq applied 2>/dev/null|wc -l )")" = $rev; then
            need_bail=false
        fi

        if test "$(gq applied)" != "$(gq series)"; then
            need_bail=false
        fi
    fi

    if test $need_bail = true; then
        git fetch $remote refs/heads/$branch >/dev/null 2>&1 
        fetch_rev=$(git rev-parse FETCH_HEAD)

        if test "$head_rev" = "$fetch_rev"; then
            need_bail=false
        fi
    fi

    if test $need_bail = true; then
        (
            flock -x 10;
            echo $path rev not the same;
        )
        exit

    fi
fi

#{%/sh%}
' 2>&1 10>~/.logs/repo-changes.lock | (
    cd $(lookup_file .repo/..);
    log=./out/repo-changes.log"$(echo -n $*)"
    lognow="$log-$(now)"
    tee "$lognow" 2>/dev/null
    ln -sf $(basename "$lognow") "$log" >/dev/null 2>&1
)
