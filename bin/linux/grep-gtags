#!/usr/bin/env perl

use Getopt::Long;
use strict;
use String::ShellQuote;

open(my $log, ">>", glob("~/.beagrep.log")) or die "Error openning log";
print $log "$0 @ARGV in " . $ENV{PWD} . "\n";

print "$0 ";

my @ARGV_save = @ARGV;
foreach my $x (@ARGV) {
    $x = shell_quote($x);
    print "$x ";
}
print "\n";


#gtags-cscope-grep regexp

my $pwd;


chomp($pwd = $ENV{PWD});

$pwd = "$ENV{HOME}/tmp/for-code-reading$pwd";
our $approx_dir = "ENV{HOME}/tmp/for-code-reading$ENV{GTAGS_START_FILE}";

while ( not -f "$pwd/GTAGS" and not "$pwd" eq "/") {
    chomp($pwd = `dirname "$pwd"`);
}

if ($pwd eq "/" or $pwd eq glob("~")) {
    chomp($pwd = `readlink ~/.gtags-dir`);
    print "pwd is read from ~/.gtags-dir at $pwd\n";
} else {
    print "link $pwd to ~/.gtags-dir\n";
    system("rm", "-f", glob("~/.gtags-dir"));
    system("ln", '-sf', $pwd, glob("~/.gtags-dir"));
}

my $lookup_type = 1;
my $lookup_needle = "hello_world";
my $lookup_restrict_regexp;

GetOptions(
    "e=s" => \$lookup_needle,
    );

$lookup_needle =~ s/\+.*//;
$approx_dir = substr($approx_dir, length($pwd));

sub do_cscope($$$$) {
    my ($pwd, $lookup_type, $lookup_needle, $lookup_restrict_regexp) = @_;
    chdir ($pwd) or die "Error chdir $pwd";
    my $gtags_dir = $pwd;
    $gtags_dir = shell_quote($gtags_dir);
    my $got_results = 0;
    my $code_dir = substr($pwd, length("$ENV{HOME}/tmp/for-code-reading"));
    $code_dir =~ s,/+,/,g;
    open(my $grep, "-|", "echo $lookup_type$lookup_needle|gtags-cscope");

    my @matches;
    my %matches;

    while (<$grep>) {
        chomp();
        s/^>>.*//;
        my $file=$_;
        $file =~ s/ .*//;
        if (not -e "$code_dir/$file") {
            next;
        }
        if ($lookup_restrict_regexp && not m/$lookup_restrict_regexp/i) {
            next;
        }

	unless ($_ eq "") {
	    push @matches, $_;
	    m/(.*?) (.*?) (.*?) (.*)/;
	    $matches{$_} = [$1, $2, $3, $4];
	    my $x = $1;
	    $x =~ s,.*/,,;
	    $matches{$_}->[4] = $x;
	}
    }

    use String::Approx 'adistr';
    our $approx_dir;

    my $gpath_path = "$gtags_dir/GPATH";
    my %update_path;
    for (sort {
	abs(adistr($matches{$a}->[0], $approx_dir)) + abs(adistr($matches{$a}->[4], $lookup_needle))
	    <=> 
	    abs(adistr($matches{$b}->[0], $approx_dir)) + abs(adistr($matches{$b}->[4], $lookup_needle))
	 } @matches) {
	# print 'dist between "' . $matches{$_}->[0] . '" and "' . $approx_dir . '" is ' . abs(adistr($matches{$_}->[0], $approx_dir)) . "\n";
	my ($file, $line, $str) = ($matches{$_}->[0], $matches{$_}->[2], $matches{$_}->[3]);
        print "$code_dir/$file:$line: $str\n" unless $str =~ m/^#undef|^EXPORT_SYMBOL/ or $file =~ m,external/kernel-headers, or $file =~ m,android-[2-7]/arch-,;
	$got_results = 1;
        
        $update_path{$file} = 1;
    }
    chdir ($code_dir) or die "Can not change to $code_dir";
    my @update_path = keys %update_path; 
    system("echo @update_path |tr ' ' '\n'| gtags --gtagslabel=plugin-example -i -f - $gtags_dir");
    return $got_results;
}

exit if do_cscope($pwd, $lookup_type, $lookup_needle, $lookup_restrict_regexp);
chomp(my $gtags_fallback_dir = qx(readlink ~/.gtags-fallback-dir));
exit unless $gtags_fallback_dir;
$gtags_fallback_dir = glob("~/$gtags_fallback_dir");

sub debug(@) {
  print STDERR "@_\n";
}
debug "Not found in current dir; search in $gtags_fallback_dir";

do_cscope($gtags_fallback_dir, $lookup_type, $lookup_needle, $lookup_restrict_regexp);

