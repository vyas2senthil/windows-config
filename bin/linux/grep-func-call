#!/usr/bin/perl

print "\n";
use strict;
use String::ShellQuote;
use Getopt::Long;

open(my $debug, ">", glob("~/.logs/grep-func-call.log"))
  or die "Error: can not open log";

sub debug(@) {
    print $debug "@_\n";
}

my $silent = 0;
my $target = "hello";
my $members = 0;
my $grep_all = 0;
my $no_comment = 0;
my @argv_for_grep_all = @ARGV;

GetOptions(
    "s!" => \$silent,
    "a!" => \$grep_all,
    "m!" => \$members,
    "e=s" => \$target,
    "nc!" => \$no_comment,
    );

debug "$0:" . __LINE__ . ": no_comment is $no_comment";
if ($grep_all) {
    system("grep-func-call-all", @argv_for_grep_all);
    exit 0;
}

open(my $ctags_pipe, "-|",  "ctags-exuberant --c-kinds=+p --language-force=" . $ENV{GTAGS_LANG_FORCE} . " -xu " . $ENV{GTAGS_START_FILE})
    or die "Error: open gtags output";

open(my $env, ">", glob("~/.logs/grep-func-call.env"))
    or die "Error: open env save file failed";

print $env "export GTAGS_LANG_FORCE=$ENV{GTAGS_LANG_FORCE}\n";
print $env "export GTAGS_START_FILE=$ENV{GTAGS_START_FILE}\n";

my %def_line_map;
my @def_lines;

$def_line_map{1} = "******";
$def_line_map{10000000} = "******";
while(<$ctags_pipe>) {
  print $debug "$_";
  m/(\S*?)\s+(\S*?)\s+(\S*?)\s+(.*)/ or next;
  my ($func, $type, $line) = ($1, $2, $3);
  $def_line_map{$line} = $func;
}

@def_lines = sort { $a <=> $b } keys %def_line_map;
open(my $file, "<", $ENV{GTAGS_START_FILE}) or die "Error: open source file";

print $debug "def_lines are @def_lines\n";
my $last_match_def_line = 1;
my %file_line_map;
my %printed_func_map;
while(<$file>) {
    $file_line_map{$.} = $_;
    next unless m/$target/;

    debug ":$.: $_";
    my $last_checked_def_line = -1;
    my $line_str = $_;
    my $line_no = $.;

    my $next_def_line_idx = 0;
    my $current_def_line;
    for my $idx (1.. (@def_lines - 1)) {
	if ($def_lines[$idx] > $.) {
	    $current_def_line = $def_lines[$idx - 1];
	    last;
	}
    }
    
    if ($def_line_map{$current_def_line} eq "******") {
	debug "the previous defun is *****";
	next;
    }

    if ($def_line_map{$current_def_line} =~ m/\b$target\b/) { # this is the definition of target
	debug "the previous definition matches myself";
	next;
    }

    if ($no_comment and m,(?:^\s*/?\*)|(?:^\s*//),) {
	debug "$0:" . __LINE__ . ": no comment should be allowed";
	next;
    }
	    
    if ($members == 0 && $current_def_line == $line_no && $file_line_map{$line_no} =~ m/\b$target\b/ && $def_line_map{$current_def_line} =~ m/\b$target\b/) {
	#next;
	;
    } else {
	debug "members: $members, current_def_line: $current_def_line, line: $line_no, file_line_map{\$line_no}: $file_line_map{$line_no}, target: $target";
    }
    next if $file_line_map{$current_def_line} =~ m/^\s*#\s*define\s+.*[^\\]$/;
    unless ($printed_func_map{$current_def_line}) {
	my $calling_tag = "<=";
	if ($current_def_line == $.) {
	    $calling_tag = "<>";
	}
	print $ENV{GTAGS_START_FILE} . ":$current_def_line: $calling_tag " 
	    . 
	    (
	     $silent ? ($def_line_map{$current_def_line} . "\n") : $file_line_map{$current_def_line}
	    );
	$printed_func_map{$current_def_line} = 1;
    }

    print $ENV{GTAGS_START_FILE} . ":$.: => " . $line_str unless ($silent or $current_def_line == $.);
}


