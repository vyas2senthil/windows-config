#!/bin/bash
. ~/.bashrc

if test "`basename $0`" == repo-update-x -a $# == 0 || tty >/dev/null 2>&1 ; then
    set -- . 
    echo will only update current dir.
fi

if test $# == 0; then
    set -- `locate -b -r '^\.repo$'|grep src`
fi

echo will update: "$@"
for x in "$@"; do 
    (
        set -e
        cd $x
        cd `lookup_file .repo/..`
        test -e Makefile || exit
        repo sync -n -j4

	my-rfa -j 5 -- bash -c 'mkdir -p $(lookup_file .repo/../out)/$(today);
                                log=$(lookup_file .repo/../out)/$(today)/$(echo $REPO_PATH | sed -e "s,/,.,g").git-log;
                                remote=$(repo-remote)
                                refname=$(repo-refname)
                                git log $remote/$refname@"{1 day ago}"..$remote/$refname > $log
                                if test $(stat -c %s $log) = 0; then
                                    rm $log
                                fi
                               '
        mkdir -p out
        mv out/changes.log out/changes.log-backup-`today` || true
        repo-changes\? 2>&1|tee out/changes.log
        for x in `cat out/changes.log`; do 
            (cd $x || repo sync "$x" || true)
            repo forall $x -c 'git merge `repo-remote`/`tbranch`' || true
        done 2>&1|tee out/merge.log

        { repo-changes\? $(cat out/changes.log) | grep . > out/changes.log.new && { 
                echo some repos still has changes:;
                cat out/changes.log.new
            }
        } || 
        echo repo is up to date.
        if yes-or-no -y "Start full build?"; then
            android-full-build 'kernel system misc'  >/dev/null 2>&1
            bhj-short-notify $(basename $0) "$(pwd): build completed"
        fi
    )
done

if test $# != 1; then
    ~/bin/linux/cron-code-reading
fi
