#!/bin/bash
. ~/.bashrc

if test $(basename $0) != update-repo-projects -a $# == 0 || tty >/dev/null 2>&1 ; then
    set -- . 
    echo will only update current dir.
fi

if test $# == 0; then
    set -- `locate -b -r '^\.repo$'|grep src`
fi

echo will update: "$@"
for x in "$@"; do 
    (
        set -e
        cd $x
        cd `lookup_file .repo/..`
        test -e Makefile || exit
	if yes-or-no-p -y "do repo sync?"; then
            repo sync -n -j4
	fi
	ANDROID_DIR=$(readlink -f $(lookup_file .repo/..))
	CHANGES_DIR=$(dirname $ANDROID_DIR)/$(basename $ANDROID_DIR)-out/daily-changes
	TODAYS_CHANGES_DIR=$CHANGES_DIR/$(today)
	mkdir -p $TODAYS_CHANGES_DIR
	relative-link $CHANGES_DIR $ANDROID_DIR || true
	
	export ANDROID_DIR TODAYS_CHANGES_DIR

	for x in $(xmlstarlet sel -B -t -m //project -v @path -n -b  $(lookup_file .repo/manifest.xml 2>/dev/null || echo /dev/null)  2>/dev/null); do
	    test -d "$x" && continue
	    repo sync $(echo $x|perl -npe 's,/+$,,')
	    touch ~/etc/generate-repo-info.mk
	done

	my-rfa -j 5 -- '
#{%sh%}
log=$TODAYS_CHANGES_DIR/$(repo-path | sed -e "s,/,.,g").git-log;
remote=$(repo-remote)
refname=$(repo-refname)
git log $remote/$refname@"{1 day ago}"..$remote/$refname > $log
if test $(stat -c %s $log) = 0;
then
    rm $log
fi
#{%/sh%}
'

        mkdir -p out
        mv out/changes.log out/changes.log-backup-`today` || true
        repo-changes\? 2>&1|tee out/changes.log
        for x in `cat out/changes.log | perl -npe 's/.*?cd: (.*?):.*/$1/' | pn 1`; do 
	    if test ! -d $x; then
		touch ~/etc/generate-repo-info.mk;
		repo sync "$x" || true
		continue
	    fi
	    
	    if test $(basename $0) = bpe-local-build; then
		(
		    patchdir=$(readlink -m out)/../code-backup/$x/$(now)
		    mkdir -p "$patchdir"
		    cd $x
		    file=$patchdir/head-$(git rev-parse HEAD)
		    touch "$file"
		    git add .
		    git commit -m 'backup for autobuild'
		    git format-patch HEAD^ -o $patchdir
		    git reset --hard $(repo-remote)/$(repo-branch)
		)
		continue
	    fi
            repo forall $x -c '
#{%sh%}
set -x
if test -n "$(git symbolic-ref HEAD)" -a -d .git/patches/$(basename $(git symbolic-ref HEAD))/ && 
    ! git-is-ancestor $(repo-remote)/$(repo-branch) HEAD; then
    gq push -a
    gq rebase $(repo-remote)/$(repo-branch)
else
    git rebase $(repo-remote)/$(repo-branch)
fi
#{%/sh%}
' || true
        done 2>&1|tee out/merge.log

        { 
	    repo-changes\? $(cat out/changes.log | perl -npe 's/.*?cd: (.*?):.*/$1/' | pn 1) | grep . > out/changes.log.new && 
	    {
                echo some repos still has changes:;
                cat out/changes.log.new
            }
        } || 
        echo repo is up to date.

	if test $(basename $0) = bpe-local-build; then
	    bpe-update -r
	fi
        if yes-or-no -y "Start full build?"; then
            android-full-build 'kernel system misc'  >/dev/null 2>&1
            bhj-short-notify $(basename $0) "$(pwd): build completed"
        fi
    )
done

if test $# != 1; then
    ~/bin/linux/cron-code-reading
fi
