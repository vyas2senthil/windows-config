(require 'sawfish.wm.util.keymap)
(load-file "~/.sawfish/iswitch-window.jl")
(bind-keys global-keymap "Super-s" 'iswitch-window)


(bind-keys global-keymap "Super-C-i" (lambda () (system "~/bin/linux/screenshot&")))
(bind-keys global-keymap "Super-r" (lambda () (system "grun&")))
(bind-keys window-keymap "Super-i" (lambda () (display-message (concat "Window class is: " (window-class (input-focus))))))
(bind-keys global-keymap "Super-SPC" (lambda() 
                                       (mapc (lambda (window)
                                               (window-put window 'depth 0))
                                             (stacking-order))))


(defun bhj-activate-window (window)
  (if (window-iconified-p window)
      (uniconify-window window))
  (activate-window window))


(defun find-window-or-exec (wclass #!optional wcommand)
  (if (eq (catch 'wFound
            (mapc (lambda (window)
                    (if (string-match wclass (window-class window) 0 t)
                        (progn 
                          (bhj-activate-window window)
                          (throw 'wFound 'wFound))))
                  (stacking-order)))
          'wFound)
      nil
    (if wcommand
        (system (concat wcommand "&")))))

(mapc
 (lambda (args)
   (let ((key (car args))
         (wclass (cadr args))
         (wcommand (caddr args)))
     (bind-keys global-keymap key
                (lambda ()
                  (find-window-or-exec wclass wcommand)))))
 '(
   ("Super-e" "Emacs" "emacs.bhj")
   ("Super-p" "Gnome-terminal" "gnome-terminal --hide-menubar -e ~/bin/myscr")
   ("Super-w" "Nautilus" "nautilus")
   ("Super-g" "Gimp" "gimp")
   ))

(mapc 
 (lambda (arg)
   (let ((wclass nil) (wmark nil))
     (bind-keys global-keymap (concat "C-M-" (format nil "%d" arg))
                (lambda ()
                  (setq wmark (input-focus))
                  (setq wclass (window-class (input-focus)))))
     (bind-keys global-keymap (concat "Super-" (format nil "%d" arg))
                (lambda ()
                  (if (and  (windowp wmark) (window-mapped-p wmark))
                      (bhj-activate-window wmark)
                    (if wclass
                        (find-window-or-exec wclass)))))))
 '(0 1 2 3 4 5 6 7 8 9))

(bind-keys global-keymap "Super-k" (lambda () (system "emacsclient.emacs-snapshot -n ~/doc/work.txt&")))


(bind-keys global-keymap "Super-d"
           (lambda ()
             (if (not (showing-desktop-p))
                 (show-desktop)
               (hide-desktop))))

(setenv "XMODIFIERS" "@im=SCIM")
(setenv "XIM" "SCIM")
(setenv "GTK_IM_MODULE" "scim")
(setenv "TZ" "Asia/Shanghai")
(setenv "LANG" "en_US.UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
(setenv "PATH" (concat 
                (getenv "HOME") "/bin:" 
                (getenv "HOME") "/bin/linux:" 
                (getenv "HOME") "/bin/linux/ext:" 
                (getenv "HOME") "/bin/linux/ext/android-sdk-linux_86/tools:"
                (getenv "PATH")))
(setenv "CLASSPATH" (concat
                     "/usr/local/jdk1.5/lib:"
                     (getenv "HOME") "/bin/linux/ext/stringtemplate.jar:"
                     (getenv "HOME") "/bin/linux/ext/antlr3.jar:"
                     (getenv "HOME") "/bin/linux/ext/antlrworks.jar:."))


(if (or  (boundp 'ProgramsStarted) (not (string-equal (getenv "DISPLAY") ":0.0")))
      nil ;; Sawfish has already started those Programs
  (setq ProgramsStarted t)
  (system "for x in ~/.sawfish/start/*; do ($x&); done&"))

(require 'sawfish.wm.commands.x-cycle)

(setq im-class "Eva|Pidgin"
      br-class "Firefox|Chromium|Conkeror"
      dc-class "OpenOffice|Acroread|Evince"
      cycle-groups (list im-class
                     br-class
                     dc-class))

(define-cycle-command-pair
  'cycle-class-bhj 'cycle-class-bhj-backwards
  (lambda (w)
    (let ((class (window-class w)))
      (delete-if-not window-in-cycle-p
                     (filter-windows
                      (let ((grps cycle-groups) (matched nil) grp)
                        (while (and grps (not matched))
                          (setq grp (car grps)
                                grps (cdr grps))
                          (if (string-match grp class)
                                (setq grps nil matched t)))
                        (if matched
                            (lambda (x) (string-match grp (window-class x)))
                          (lambda (x) (equal (window-class x) class))))
                      (window-order)))))
  #:spec "%W")

(define-cycle-command-pair
  'cycle-im-window 'cycle-im-windows-backwards
  (lambda () (filter-windows 
              (lambda (x) (string-match im-class (window-class x)))
              (stacking-order))))

(define-cycle-command-pair
  'cycle-br-window 'cycle-br-window-backwards
  (lambda () (filter-windows 
              (lambda (x) (string-match br-class (window-class x)))
              (stacking-order))))

(define-cycle-command-pair
  'cycle-dc-window 'cycle-dc-window-backwards
  (lambda () (filter-windows 
              (lambda (x) (string-match dc-class (window-class x)))
              (stacking-order))))


