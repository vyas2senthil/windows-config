* TODO add ignore file for EventHub

* Android
** init

* Reading source code

** DONE When grepping or tag-searching, the result should be re-ordered so that the matching item closer to the starting directory should come first.
   
This can be done easilly with the perl String::Approx module, you just
install libstring-approx-perl in debian/ubuntu. No need to use cpan.

However, the .emacs requires some hacking, since the cscope.el won't
tell the cscope-program where did the tag-searching start: it will
start the program in the directory where the database file is found;
not the directory of the file in which user called the EMACS cscope-xxx
command. Anyway, I choose to pass the info in using one of simplest
IPC: environment variable:-)



* Run dialog

The Windows run dialog is so poor, that I've implemented my own RunBhjRun dialog. Features include: 

** Cygwin support

You can specify pathnames using both cygwin or windows style, such as:
/c/windows/notepad.exe or c:\windows\notepad.exe, and the notepad.exe
application will be started.

Of course, cygwin is required to be installed. What, you are not using it already? G...

** Emacs style key binding, auto completion, history

I want to avoid the Mouse as much as possible, so the above items are
essential to me. You can get the easy ones pretty easilly (that's why
they are called easy:-): C-b for bach-char, C-f for forward-char, etc.

*** Auto completion: 
    
OK, I think it's something better. It's skeleton completion, which
means to complete A_VERY_LONG_WORD, you don't need to type from the
beginning, which Windows Run Dialog does, instead, you can start
anywhere, for e.g., you can type 

    very long

and the history entry containing A_VERY_LONG_WORD will pop-up, you can
press C-n (to move onto that entry) and Enter (to exec it).


* Android Factory Testing


* beagle-grep 简介

** 为什么用grep

告诉你一个秘密，在纸带打孔、机器指令编程的时代过去之后，所有的程序都是
用一种语言写的。什么C/C++/Java/Python/Perl/Javascript/Php/Lisp，其实全
都是一种语言，那就是——“文本”。

而文本处理最古老、最原始的一个程序，就是grep。再告诉你一个秘密，在黑客
帝国中那个从计算机屏幕上不断掉落的绿色字符里能看到美女辣妹的时代到来之
前，grep不会过时。

其原因，是因为任何文本，都有两种特性，而grep这样的程序完美体现了第一
种：正则表达式。

第二种特性是语法。

没有了这两种特性，就不是文本了。

其实我开始重视grep只是因为一本书的序里的一句话，一句跟那本书的主题貌似
毫无关系的话。

书的名字叫《Linux Device Driver》，第一版，作者说：“这本书是我花了很多
小时仔细grep内核代码写出来的成果。”

** 为什么用beagle-grep

因为它是打了兴奋剂的grep:-)

假如让你选两台机器，一台4M内存，一台4G内存，你选哪一台？

为什么？因为时代变了，以前用4M的机器就够，现在要处理的信息量更大了，所以我们要4G的。

这还不够，我们还需要把软件也升一下级，比如grep，升级成beagle-grep。

** 原理

beagle是一个从lucene演变来的搜索引擎程序。当我们想在android/kernel等巨
大的代码库里grep一点文本的时候，加上beagle，我们可以大大节省时间。

其原因，因为正则表达式太强大，我们可以放弃、出让一点它的强大，换回来更好的性能。

比如，你想搜一下readlink这个函数在哪里被调用，你肯定不会用强大的正则表
达式写出

    grep -n -e "r.*e.*a.*d.*l.*i.*n.*k" -r . 

这么强大的命令来吧？

如果你愿意以退为进，放弃这么强大的功能，那么beagle就可以帮你的忙了：先
用beagle查询当前目录下有哪几个文件包含``readlink''这个单词，再专门只在
这些个文件上用grep精确的定位出哪一行上出现了这个单词。

参考：

http://github.com/baohaojun/windows-config/raw/master/gcode/beagle/beagle-grep-readme.org


** 那么，哪里能买得到呢？

在ubuntu/debian下，运行下列命令：

cd ~
git clone git://github.com/baohaojun/windows-config.git
~/windows-config/bin/after-co-ln-s.sh
. ~/.bash_profile
~/bin/linux/after-check-out.sh

*** 使用方法

在源代码项目的最上层目录下，运行：

    for-code-reading

运行结束后，可以在代码的任意子目录下运行：

    beagle-grep.sh -e "hello world"

加`-l'参数可以列出哪些文件其内容包含相应的单词，加`-p'参数可以列出哪些
文件其文件名包含相应的单词。

关于与Emacs结合的使用，下次有空再写吧。

*** 注意事项

1. 你的.bashrc等文件会被我替换，但是别担心，我会帮你备份成.bashrc.bak等。
   如果实在不放心，可以自己先备份一下。

2. 最后一个命令会做很多事情，包括编译我的版本的beagle，而在ubuntu上是编
   不过的，有一个文件会出错，你需要用git恢复这个文件到它的上一个版本。

3. 如果你因为使用beagle-grep从一个文艺青年变成文本青年，本人概不负责。

4. 如果你因为beagle-grep太快而产生头晕、恶心、呕吐等类似于坐过山车的症
   状，本人概不负责。相反，请考虑支付本人相当于欢乐谷门票的钱;-)

* nvidia project

** TODO acore process force close report to nvidia

** gsensor died root cause

Basically gsensor is just an i2c device + an interupt gpio. Now in our
nvidia code, gsensor will die randomly and it's very difficult to
reproduce. But it happens. The root cause, I think, has been
located. It's because I cleared the gpio level before I re-enabled the
interupt. This must be reversed, since I'm using Interupt_Falling_Edge. 

See, when using Interupt_Falling_Edge, after I clear the gpio state,
and before I re-enable the interupt, there could happen another
Falling_Edge, which should have interupted the CPU, but got missed,
because the interupt is not re-enabled yet! And then, since we never
pull the gpio up unless we are interupted, and interupt will not
happen unless the gpio is pulled up (and fall down, thus the name
``Interupt_Falling_Edge''), we got into a dead lock. 

The fix should be to reverse ``re-enable interupt'' and ``clear gpio state''.

Touch will also die occasionaly, I wonder if it's the same logic error.


* sawfish ifind, write it like my Windows version

* sawfish "run bhj run", write it like my Windows version
