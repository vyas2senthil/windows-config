<?xml version="1.0"?>

<!--
//
// beagleMailWindow.xul: Overlay for folder and message menu
//
// Copyright (C) 2007 Pierre Ã–stlund
//

//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
-->

<?xml-stylesheet href="chrome://beagle/skin/overlay.css" type="text/css"?>
<?xml-stylesheet href="chrome://beagle/content/beagle.css" type="text/css"?>
<!DOCTYPE overlay SYSTEM "chrome://beagle/locale/beagle.dtd">

<overlay id="beagle-window-overlay" 
		xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<stringbundleset id="stringbundleset">
		<stringbundle id="bundle_beagle" src="chrome://beagle/locale/strings.properties"/>
	</stringbundleset>

	<script src="beagleUtils.js"/>

	<script type="application/x-javascript">
	<![CDATA[
		var indexer = GetJsService ('@beagle-project.org/services/indexer;1');
		var settings = GetJsService ('@beagle-project.org/services/settings;1');
		var messenger = Components.classes ['@mozilla.org/messenger;1'].getService (Components.interfaces.nsIMessenger);

		function getSelectedFolder ()
		{
			var selectedFolders = GetSelectedMsgFolders ();
			if (selectedFolders == null || selectedFolders.length < 1)
				return null;
			
			return selectedFolders [0];
		}
		
		function getSelectedMessages ()
		{
			try {
				var view = GetDBView ();
				var uris = {};
				var count = {};
				view.getURIsForSelection (uris, count);
				var msgs = Components.classes ['@mozilla.org/supports-array;1']
					.createInstance (Components.interfaces.nsISupportsArray);
				
				for (var i = 0; i < count.value; i++) {
					var uri = uris.value [i];
					msgs.AppendElement (messenger.msgHdrFromURI (uri));
				}
				
				return msgs;
			} catch (ex) {
			}
			
			return null;
		}

		function onIndexFillFolderMenu ()
		{
			// We don't generate the menu if we are disabled
			if (!settings.getBoolPref ('Enabled'))
				return;
			
			var folder = getSelectedFolder ();
			if (!folder)
				return;
				
			try {
				var noindexing = document.getElementById ('folderPaneContext-noindexing');
				var removefolder = document.getElementById ('folderPaneContext-removeIndexedFolder');
				var removefolderrecursive = 
					document.getElementById ('folderPaneContext-removeIndexedFolderRecursive');
				var shouldNotIndex = indexer.isFolderUserMarked (folder);
				
				// Show a nice little "checked mark" if item is not supposed to be indexed
				if (shouldNotIndex) 
					noindexing.setAttribute ('checked', 'true');
				else
					noindexing.setAttribute ('checked', 'false');
				noindexing.hidden = false;
					
				// Show the "remove" option if current folder is indexed
				if (indexer.isFolderIndexed (folder)) {
					removefolder.hidden = false;
					removefolderrecursive.hidden = false;
				} else {
					removefolder.hidden = true;
					removefolderrecursive.hidden = true;
				}
				
				// Show the separator
				var sep = document.getElementById ('folderPaneContext-beaglesep-folder');
				sep.hidden = false;
			} catch (ex) {
			}
		}
		
		function allMarkedForExclusion (msgs)
		{
			var enum = msgs.Enumerate ();
			
			while (1) {
				var hdr = enum.currentItem ();
				if (!indexer.isHdrUserMarked (hdr))
					break;
			
				try {
					enum.next ();
				} catch (ex) {
					return true;
				}
			}
			
			return false;
		}
		
		function allMarkedAsNotIndexed (msgs)
		{
			var enum = msgs.Enumerate ();
			
			while (1) {
				var hdr = enum.currentItem ();
				if (indexer.isHdrIndexed (hdr))
					break;
				
				try {
					enum.next ();
				} catch (ex) {
					return true;
				}
			}
			
			return false;
		}

		function onIndexFillMessageMenu ()
		{
			// We don't generate the menu if we are disabled
			if (!settings.getBoolPref ('Enabled'))
				return;
			
			var messages = getSelectedMessages ();
			if (!messages)
				return;
			
			try {
				var removemessages = document.getElementById ('threadPaneContext-removeIndexedMessage');
				var noindexing = document.getElementById ('threadPaneContext-noindexing');
				
				// If all selected messages has the "do not index" flag, show the check mark. Otherwise don't.
				if (allMarkedForExclusion (messages)) 
					noindexing.setAttribute ('checked', 'true');
				else
					noindexing.setAttribute ('checked', 'false');
				noindexing.hidden = false;
				
				// We only show the "remove"-item if we have at least one indexed message
				removemessages.hidden = allMarkedAsNotIndexed (messages);
			} catch (ex) {
			}
		}
		
		function onRemoveIndexedFolder ()
		{
			try {
				var folder = getSelectedFolder ();
				if (!folder)
					return;
				
				// We remove folder non-recursive and ask if user marks should be removed as well
				gBeagleUnindex.RemoveFolder (folder, false, true);
			} catch (ex) {
			}
		}

		function onRemoveIndexedFolderRecursive ()
		{			
			try {
				var folder = getSelectedFolder ();
				if (!folder)
					return;
							
				// We remove folder recursively and ask if user marks should be removed as well
				gBeagleUnindex.RemoveFolder (folder, true, true);
			} catch (ex) {
			}
		}
		
		function onRemoveIndexedMessage ()
		{
			try {
				var msgs = getSelectedMessages ();
				if (!msgs)
					return;
					
				// We remove messages and ask is user marks should be removed as well
				gBeagleUnindex.RemoveHdrs (msgs, true);
			} catch (ex) {
			}
		}
		
		function onNoFolderIndexing ()
		{
			try {
				var folder = getSelectedFolder ();
				if (!folder)
					return;
					
				folder.QueryInterface (Components.interfaces.nsIMsgFolder);
				var userMarked = indexer.isFolderUserMarked (folder);
				var queue = GetJsService ('@beagle-project.org/services/queue;1');
				if (userMarked) {
					indexer.resetFolder (folder, true, false, false);
					queue.addFolder (folder);
				} else
					indexer.markFolderAsUserMarked (folder);
			} catch (ex) {
			}
		}
		
		function setUserMarked (msgs, userMarked)
		{
			var done = false;
			var enum = msgs.Enumerate ();
			
			while (!done) {
				var hdr = enum.currentItem ();
				
				if (userMarked) 
					indexer.markHdrAsUserMarked (hdr);
				else
					indexer.resetHdrUserMarked (hdr);
			
				try {
					enum.next ();
				} catch (ex) {
					done = true;
				}
			}
		}
		
		function onNoMessageIndexing ()
		{
			try {
				var msgs = getSelectedMessages ();
				if (!msgs)
					return;
				
				var userMarked = !allMarkedForExclusion (msgs);
				setUserMarked (msgs, userMarked);
				
				if (!userMarked) {
					var hdr = msgs.QueryElementAt (0, Components.interfaces.nsIMsgDBHdr);
					var queue = GetJsService ('@beagle-project.org/services/queue;1');
					queue.addHdr (hdr);
				}
					
			} catch (ex) {
			}
		}
		
		// The code below belongs to the "open-message-from-command-line"-code. The reason
		// why this code is placed here is because of the MsgOpenNewWindowForMessage-function,
		// which will do everything we want. This code will be removed once we have proper
		// support for opening from command line. This code is ugly...
		var observer = Components.classes['@mozilla.org/observer-service;1']
			.getService(Components.interfaces.nsIObserverService);
		
		var gBeagleCommandLineObserver = {
			observe: function (subject, topic, data)
			{
				if (!data)
					return;
				
				var messenger = Components.classes ['@mozilla.org/messenger;1']
					.getService (Components.interfaces.nsIMessenger);
				var hdr = messenger.msgHdrFromURI (data);
				var tree = null, currentIndex = -1;
				
				dump ("Opening message: " + hdr.folder.getUriForMsg (hdr) + "\n");
				
				// Save the index of the currently selected folder and switch to folder indexed
				// 0 (zero), which will always be a root folder.
				if(gFolderTree) {
					tree = GetFolderTree();
					currentIndex = tree.view.selection.currentIndex;
					tree.view.selection.select(0);
				}

				// Open the message
				MsgOpenNewWindowForMessage (data, hdr.folder.URI);
				
				// Switch back to the old folder (if any)
				if(currentIndex != -1) {
					tree.view.selection.select(currentIndex);
				}
			}
		};
		
		function getWindowCount ()
		{
			var ww = Components.classes ['@mozilla.org/embedcomp/window-watcher;1']
				.getService (Components.interfaces.nsIWindowWatcher);
			var enumerator = ww.getWindowEnumerator ();
			var count = 0;
			
			while (enumerator.hasMoreElements ()) {
				enumerator.getNext ();
				count++;
			}
			
			return count;
		}
		
		// Each window opened (including the windows displaying a message) will load the code in
		// this file due to the way they are overlayed. If each window is listening for new 
		// messages that the user wants to display, then we'll get one new message window per 
		// already opened window. For instance, if the user has a main window open as well as 
		// writing a message and decides to display a message - two equal windows will pop-up. 
		// We only listen in case we have one windows open to work around this issue.
		if (getWindowCount () == 1)
			observer.addObserver (gBeagleCommandLineObserver, 'beagle-open-uri', false);
		
		// Tell the world that we are done (mainly to make the "open from command line"-hack to work)
		observer.notifyObservers (null, 'beagle-loaded', null);
	]]>
	</script>
	
	<!-- These menu options will show up when right-clicking a message -->
	<popup id="threadPaneContext" 
			onpopupshowing="onIndexFillMessageMenu (); return fillThreadPaneContextMenu();">
		<menuseparator id="threadPaneContext-beaglesep-message"/>
		<menuitem id="threadPaneContext-removeIndexedMessage"
				label="&beaglemessageview.removemessage;"
				oncommand="onRemoveIndexedMessage ();"
				insertbefore="threadPaneContext-beaglesep-message"
				hidden="true"/>
		<menuitem id="threadPaneContext-noindexing"
				label="&beaglemessageview.noindexing;"
				oncommand="onNoMessageIndexing ();"
				insertafter="threadPaneContext-beaglesep-message"
				type="checkbox"
				autocheck="false"
				hidden="true"/>
	</popup>
	
	<!-- These menu options will show up when right-clicking a folder -->
	<popup id="folderPaneContext" 
			onpopupshowing="onIndexFillFolderMenu (); return fillFolderPaneContextMenu ();">
			
		<menuseparator id="folderPaneContext-beaglesep-folder" 
				insertafter="folderPaneContext-sep2"
				hidden="true"/> 
		<menuitem id="folderPaneContext-removeIndexedFolder" 
				label="&beaglefoldertree.removefolder;" 
				oncommand="onRemoveIndexedFolder ();"
				insertafter="folderPaneContext-sep2"
				hidden="true"/>
		<menuitem id="folderPaneContext-removeIndexedFolderRecursive" 
				label="&beaglefoldertree.removefolderrecursive;" 
				oncommand="onRemoveIndexedFolderRecursive ();"
				insertafter="folderPaneContext-sep2"
				hidden="true"/>
		<menuitem id="folderPaneContext-noindexing"
				label="&beaglefoldertree.noindexing;"
				oncommand="onNoFolderIndexing ();"
				insertafter="folderPaneContext-sep2"
				hidden="true"
				type="checkbox"
				autocheck="false"/>
	</popup>

</overlay>

