* Introduction
  
  I just found out about the beagle project couple of months ago, I'm
  totally excited by it. It's the missing brick that I longed for to
  write a `grep on steroid' which I can use as a source code reading
  tool.

  Yeah, right, I was using grep to read souce code, often times
  finding cscope insufficient (because some files are not source code,
  and even cscope's fuzzy syntax parser can not parse them). On the
  other hand, with large projects, such as Linux Kernel, or the even
  larger Android system, grepping can be very slow on the whole
  project. I once searched for =readlink= in android source tree, it
  took me >30 minutes!

  With beagle combined with grep, I can grep it for less than 2 seconds!


* Why is it possible

When you grep for reading source code's sake, you often don't need
complex regexp power: when you search =readlink=, you =grep readlink=,
not =grep r.*e.*a.*d.*l.*i.*n.*k=, that just does not make sense!

IOW, you 99.9% times search only for /whole words/ like =readlink=,
which is a kind of simple regexp, and unlike complex regexps (such as
=r.*e.*a.*d.*l.*i.*n.*k=), is something search engines can deal with
perfectly.


* Modifications to beagle

  Here's the details of how I changed beagle to satisfy my need:

    1. Change all beagle built in filters to FilterText. This is
       because I don't want those keywords filtered by those
       SourceCode filters. This way, I can beagle-query `extends
       CFunny' to see which classes are inheriting from `CFunny' in
       Java.

    2. Remove some restricts. For e.g., only the first 100000 tokens
       in a file will be indexed, which is undesirable for my
       purpose. Also, I enlarged the memory threshold by 10 times,
       since I found it causing problems with some large xml files.

    3. Remove more restricts. Basically, I `unremoved' anything the
       NoiseFilter will remove. Also, another filter will remove
       common English words, I unremoved those as well.

    4. Added an option to beagle-build-index,
       --deny-directory-patterns, so that I can deny some directories
       from being indexed.

* Usage

  Here's how I use it:

    1. Build a static index at the top level dir of the souce code:

         mkdir .beagle; 
         beagle-build-index --recursive\
                            --deny-directory-pattern `pwd`/out\
                            --enable-deletion\
                            --target .beagle/ .

    2. Prepare another filter so that I can discard files I'm not
       interested later when I grep. For e.g., with:
   
         ln ~/.my-beagle-filter-kernel-x86-no64 .beagle-filter
   
       I can ignore all other arches except x86 when I'm reading Linux
       Kernel source code.
        
    3. Use beagle-grep.sh in any directory in the source tree:

         ~/bin/beagle-grep.sh -e "ENGLISH_STOP_WORDS" 

       The output is like the following:

         beagle query argument `ENGLISH STOP WORDS' <== Note this
         /src/beagle/beagled/LuceneCommon.cs:1206: ...ENGLISH_STOP_WORDS...
         ...
         ...
   
       Note: althogh beagle-grep.sh's argument contains underscores, I
       removed them using a separate simple c# program (which uses
       beagle's StandardTokenizerImpl) on the argument. Beagle has its
       own special rules treating non-alphanum characters, and we must
       respect that:-)

* Where to find everything

  I have put the source code at:

   git://github.com/baohaojun/windows-config.git

  If you checkout the source code, you can find the beagle-grep.sh and
  its helper scripts under:

     windows-config
     windows-config/bin
     windows-config/bin/linux

  The beagle source code I modified is under
    
     windows-config/gcode/beagle

  The above mentioned simple c# program which breakes
  ENGLISH_STOP_WORDS to `ENGLISH STOP WORDS' is under:
 
     windows-config/gcode/BeagleTokenizer

