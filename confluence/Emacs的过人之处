h2. 与文本的紧密结合

文本是有结构的。好的文本，尤其如此。所谓好的文本，意思就是让人理解起来不费劲的文本。所以我们大多数的文本都会分章、节、段落。

Emacs可以让操作这些文本内在的结构很方便。你可以在段与段之间移动、选择、粘贴、删除。可以这么说，只要是文本有的结构，Emacs就会有功能来支持它。

文本还有一些特性，比如，大多数的情况下，一个空格与多个空格表示的意思是一样的。而我们应该尽量使用一个空格，而不是多个。这样才有一致性，读你的文本的人也不用去想，为什么这家伙那里用3个空格，这里却用4个呢？是个不三不四的家伙吧。Emacs里有一个功能，可以把N个空格，变成一个。

类似的例子，简直是举不完的，所以我也不勉为其难了。

h2. 节省你的手腕和眼睛

试想一下，如果你现在在第100行，想要移动到第1000行，你怎么操作呢？希望你不是按方向键的向下键按个990次吧。肯定应该有一个功能可以让你指定跳转到第几行啊。

OK，这个功能连记事本都有。

好吧，说个高级一点的，查找并移动。假设我们想要查找“hello world”这么一个子串，我发现很多人会拿鼠标滚轮上下滚动文本，用肉眼去找。在Emacs里，这样做是很可笑的。因为我们的黑客们认为这个功能非常重要，所以花了很多心思，让这个功能变得尽量的方便。所谓方便，意思是说我们可以按尽量少的键，就完成我们想要的功能。当然，我们可能需要一点时间去习惯这种被高度优化了的按键系统。

一旦你习惯了之后，你就再也不会再做那种用肉眼去查找的傻事儿了。而你在很多其他的编辑器里，很难做到这个习惯。因为它们都没有被优化到那种程度。试想一下，在Word里，你需要按一下C-f，再输入你要查找的字符串，再按回车，如果找到的不是你想要的，还需要再按一下回车。有时候它还允许（也就是鼓励）你用鼠标去点那个“查找下一个”的按钮。真正找到想要找的位置之后，还需要再按一下Escape，或者用鼠标点一下取消。更不用说用正则表达式的方式去查找。你会觉得，哇，这么麻烦，我还是用鼠标中键滚滚，用肉眼去搜吧。

如果你觉得我举的例子还不够有力、太抽象的话，我再举这么个例子吧。它还很好地体现了文本的结构特性。

比如我要看perlfunc里的open函数，这个函数参数太复杂了，我没记住，需要现查一下。

嗯，我切换到terminal里，输入 {{man perlfunc}} ，然后用 {{/open}} 去查找。我需要按几十次 {{n}} 键才能找到这个函数，因为open实在是个太有用武之地的单词了，就像google里你去搜 {{of/the}} 之类的单词它是不会理你的。

显然我不是这么干的。我在Emacs里直接看perlfunc的manpage。用的command叫woman，可以打开manpage。然后我用一个command叫occur，去列出来open这个串都出现perlfunc manpage里的哪些行上。然后我用scroll-other-window去滚动这个occur出来的窗口，很快我就会发现一行我想要的，它是这样的：

{code:none}
   ...
   2238:     setprotoent STAYOPEN
   2239:     setservent STAYOPEN
   3078:             opened with ""unpack("l! a*")"".  Taints the
   3173:     open FILEHANDLE,EXPR
   3174:     open FILEHANDLE,MODE,EXPR
   3175:     open FILEHANDLE,MODE,EXPR,LIST
   3176:     open FILEHANDLE,MODE,REFERENCE
   3177:     open FILEHANDLE
   3178:             Opens the file whose filename is given by EXPR, and
   3181:             Simple examples to open a file for reading:
   3183:                 open(my $fh, <, "input.txt") or die $!;
   ...
{code}

这就是我说的文本的特性，为了方便人们更好的理解，你可以在文本里采用特殊的章节、分段、缩进等手段。这里3173行到3177行上的缩进是特殊的，人们在从头到尾阅读perlfunc手册的时候看到这么个缩进就知道，哦，开始定义一个新的函数了。可是在我们需要搜索的时候呢？它也能给我们提供帮助！让我们更快地找到地方。真是太棒了，不是吗？

这样我只用按不到十个键就可以了。

但是更关键的是，我还可以节省我的脑子和眼睛。想一想吧，在我之前说的那种 {{/open}} 的方法里，我需要不停地按 {{n}} ，需要按个几十次。但是这还没完，最要命的是，我每按一次 {{n}} 都还不敢按快了，因为怕按过头了。我需要每次都停下来看一下，嗯，到了吗？是我要找的东西了吗？真是又费脑子又费眼睛的干活啊。

其实这里面的道理吧，就像中断和轮询之间的差别。在那种按 {{n}} 的方式里，你需要不断地轮询，哎，到了吗？到了吗？而在那种 {{occur}} 的方式里，当你看到那个那么特殊那么显眼的与众不同的缩进的时候，就好像大脑接收了一个中断一样，嗯，这就是我要找的！

什么？你不知道中断比轮询更有效率？呃... 这么说吧，你找了个对象。有天你累了，跟你对象说，宝贝，我休息半个小时，到时间了你叫我。那么如果你对象采用中断方式的话呢，她就是半个小时后叫醒你，如果她采用轮询方式的话呢，那就是每过1分钟，她就摇醒你，告诉你，宝贝，半小时还没到，你可以接着睡...

我告诉你，这样的对象，放到水木的饭米粒版上，一个字，离。

h3. 缩写

在写代码的时候，最有用的调试方法之一是打log。有些log是需要精心设计一下，在关键的地方加上一行log。但是有很多时候，我发现自己需要随意的打上几十行log，只是为了知道程序是跑到哪里挂住的。

比如在Kernel代码里，会用到这样的log：

{code:c}
printk(KERN_WARNING "hello world %s %s %d\n", __FILE__, __FUNCTION__, __LINE__);
{code}

你可以数一数，上面这一行代码共80个字符。你以为我每次都需要输入80个字符吗？决不。如果我只需要输入一次，我肯定只能老老实实地输入，但是当我发现我经常需要输入的时候，我会定义一个缩写，相应的命令是add-mode-abbrev。我把这个缩写定义成pk，这样我只要输入3个字符——p，k，空格就可以了，Emacs会自动帮我扩展成那80个字符。

跟手动输入比起来，额外的好处是我决不用担心中间打错几个，甚至会影响代码的编译和运行的那种错误的发生。

h3. 跟其他文本处理工具的结合

知道我怎么得出上面那行代码是80个字符的吗？用手指头瓣着一个一个数？费手费眼费脑子！

我用 {{wc -c}}。

Emacs有一个命令（编辑命令）叫shell-command-on-region，可以让你针对一段区域跑一个Unix的系统命令，选中的这块区域里的文本会作为该系统命令的标准输入。命令运行完后，标准输出会显示出来。

更棒的是，你可以用标准输出的文本内容去替换原先那块区域里的文本！

考虑这样一段C++代码：

{code:c++}
program_runner::program_runner(const cstring& cmd, which_output_t which, int timeout)
{
    system_helper(quote_str(cmd), which, timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1, 
                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd)
                + " " + quote_str(arg1)
                ,
                which, 
                timeout);
}
...
{code}

你在这里只看到了两个函数，但是最后一行的省略号表示还有更多。事实上我写了十三个。这些函数是我在C++里用来完成调用系统外部命令的。通过这些函数我可以不用担心系统命令的参数里是不是含有特殊字符。

比如libc里的system(3)函数，假设你想调用 {{echo "hello   world"}} 这样一个命令，就是说你希望在输出的时候hello和world中间有三个空格。

在bash里，你直接打 {{echo "hello   world"}} 就可以，也可以打 {{echo hello\ \ \ world}}，最后的结果是一样的。甚至可以打 {{echo hello\ "  w"orld}} ，但是从可读性的角度来说我肯定会选第一种。

但是在C/C++里用system函数的话呢？

{code:c}
system("echo \"hello   world\"");
{code}

你得承认，这可读性可不怎么样。尤其是当我们要用到更多的反斜杠转义字符的话，可读性会变得更糟。所以我希望能用这样的方式来调用：

{code:c++}
program_runner("echo", "hello   world");
program_runner("echo", "hello   world", "again");
{code}

这就跟bash里的第一种方法差不多可读了，只需要每个参数都加双引号，中间加逗号，不大需要考虑讨厌的巨伤可读性的反斜杠。其实perl/python里早有这样的辅助函数了。我这都是从那里偷来的。

实际上我想说的是，这十三个只是参数个数不同，实现几乎完全一样的重载函数我不是用手工一个一个敲进去的，我用了一个bash命令，很长的bash命令：

{code:sh}

for x in `seq 2 13`; do
echo '
program_runner::program_runner(const cstring& cmd, '

((z=x-1));
for y in `seq 1 $z`; do 
    echo 'const cstring& arg'$y','
done

echo '
                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) '

for y in `seq 1 $z`; do 
    echo '+ " " + quote_str(arg'$y')'
done

echo '
                ,
                which, 
                timeout);
}'

done
{code}

好了，以上这段代码我用上面说过的Emacs的shell-command-on-region跑一下，出来的结果让你得意的笑掉大牙：

{code:c++}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,
                               const cstring& arg3,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)
                  + " " + quote_str(arg3)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,
                               const cstring& arg3,
                               const cstring& arg4,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)
                  + " " + quote_str(arg3)
                  + " " + quote_str(arg4)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,
                               const cstring& arg3,
                               const cstring& arg4,
                               const cstring& arg5,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)
                  + " " + quote_str(arg3)
                  + " " + quote_str(arg4)
                  + " " + quote_str(arg5)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,
                               const cstring& arg3,
                               const cstring& arg4,
                               const cstring& arg5,
                               const cstring& arg6,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)
                  + " " + quote_str(arg3)
                  + " " + quote_str(arg4)
                  + " " + quote_str(arg5)
                  + " " + quote_str(arg6)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,
                               const cstring& arg3,
                               const cstring& arg4,
                               const cstring& arg5,
                               const cstring& arg6,
                               const cstring& arg7,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)
                  + " " + quote_str(arg3)
                  + " " + quote_str(arg4)
                  + " " + quote_str(arg5)
                  + " " + quote_str(arg6)
                  + " " + quote_str(arg7)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,
                               const cstring& arg3,
                               const cstring& arg4,
                               const cstring& arg5,
                               const cstring& arg6,
                               const cstring& arg7,
                               const cstring& arg8,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)
                  + " " + quote_str(arg3)
                  + " " + quote_str(arg4)
                  + " " + quote_str(arg5)
                  + " " + quote_str(arg6)
                  + " " + quote_str(arg7)
                  + " " + quote_str(arg8)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,
                               const cstring& arg3,
                               const cstring& arg4,
                               const cstring& arg5,
                               const cstring& arg6,
                               const cstring& arg7,
                               const cstring& arg8,
                               const cstring& arg9,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)
                  + " " + quote_str(arg3)
                  + " " + quote_str(arg4)
                  + " " + quote_str(arg5)
                  + " " + quote_str(arg6)
                  + " " + quote_str(arg7)
                  + " " + quote_str(arg8)
                  + " " + quote_str(arg9)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,
                               const cstring& arg3,
                               const cstring& arg4,
                               const cstring& arg5,
                               const cstring& arg6,
                               const cstring& arg7,
                               const cstring& arg8,
                               const cstring& arg9,
                               const cstring& arg10,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)
                  + " " + quote_str(arg3)
                  + " " + quote_str(arg4)
                  + " " + quote_str(arg5)
                  + " " + quote_str(arg6)
                  + " " + quote_str(arg7)
                  + " " + quote_str(arg8)
                  + " " + quote_str(arg9)
                  + " " + quote_str(arg10)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,
                               const cstring& arg3,
                               const cstring& arg4,
                               const cstring& arg5,
                               const cstring& arg6,
                               const cstring& arg7,
                               const cstring& arg8,
                               const cstring& arg9,
                               const cstring& arg10,
                               const cstring& arg11,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)
                  + " " + quote_str(arg3)
                  + " " + quote_str(arg4)
                  + " " + quote_str(arg5)
                  + " " + quote_str(arg6)
                  + " " + quote_str(arg7)
                  + " " + quote_str(arg8)
                  + " " + quote_str(arg9)
                  + " " + quote_str(arg10)
                  + " " + quote_str(arg11)

                  ,
                  which, 
                  timeout);
}

program_runner::program_runner(const cstring& cmd, 
                               const cstring& arg1,
                               const cstring& arg2,
                               const cstring& arg3,
                               const cstring& arg4,
                               const cstring& arg5,
                               const cstring& arg6,
                               const cstring& arg7,
                               const cstring& arg8,
                               const cstring& arg9,
                               const cstring& arg10,
                               const cstring& arg11,
                               const cstring& arg12,

                               which_output_t which, int timeout)
{
    system_helper(quote_str(cmd) 
                  + " " + quote_str(arg1)
                  + " " + quote_str(arg2)
                  + " " + quote_str(arg3)
                  + " " + quote_str(arg4)
                  + " " + quote_str(arg5)
                  + " " + quote_str(arg6)
                  + " " + quote_str(arg7)
                  + " " + quote_str(arg8)
                  + " " + quote_str(arg9)
                  + " " + quote_str(arg10)
                  + " " + quote_str(arg11)
                  + " " + quote_str(arg12)

                  ,
                  which, 
                  timeout);
}

{code}

好吧，我承认，这么漂亮的缩进，我是用了Emacs里的indent-region命令处理过了的。

但是我希望你已经看到了那无限的可能性。

发挥你的想象力吧，我的程序员朋友们！

下面我将告诉你，[如何学Emacs]能让你花最少的精力。
