* 乌龙

由于目前我们特殊的办公环境，我们需要同时访问三个网络：

- 外网，也就是Internet。
- 办公室内网，sync源代码、访问CM每天的release包都是这个网络。
- 公司VPN。如果能用上这个网络的话，下载邮件会快一些，同时一些公司内的事务如报销等也必须用它。

关于公司VPN，必须是有laptop的同事，在Windows下、才能访问，在Linux下好像是不行的。所以我们以下的描述，都会基于这个标准配置：即Laptop + Windows 7。

- 外网，走无线。
- 内网，走以太。

  这样做的理由，是因为内网访问需要比较大的带宽，比如CM release的包，一
  个有几百兆，我们的以太网是千兆网，秒秒钟就拷完了，走无线的话，至少二
  十倍以上的时间才能拷完，并且辐射大...

  这样会引发一个问题，无法访问外网。当有线、无线两者并存的时候，操作系
  统会认为有线网络优于无线网络，从而访问Internet的路由默认置为从有线网
  络走，可是我们的有线网络配成了内网，是无法访问Internet的。

  所以这时候需要改一下路由表，设成无线路由优先：

  #+begin_example
  route delete 0.0.0.0
  route add -p 0.0.0.0 mask 0.0.0.0 192.168.1.1 metric 1 IF 11
  route add -p 0.0.0.0 mask 0.0.0.0 10.21.128.2 metric 30 IF 10
  #+end_example
  
  解释一下：

    1) 把所有0.0.0.0也就是所谓的默认路由都删掉，因为我们下面要重设它，
       不删的话，可能重设的路由不能马上失效。

    2) 增加一条网关为无线网关（192.168.1.1）、优先级最高（也即metric最
       小，为1）、网卡为无线网卡（Interface，IF为我的无线网卡IF号
       11[fn:: 这里不同的机器可能是不同的，在 ~route print~ 命令的顶部会列
       出你机器上所有的网卡IF]）、重启保留（-p参数）的路由。

    3) 与2)是类似的，增加一条从有线网络走的默认路由，但是把优先级调成较低（metric 30）。

- 关于vpn，问题比较多，也是我出了几次乌龙的原因。

** vpn的路由绑架

我们的vpn软件，Juniper Network Connect，内建了路由表监测和绑架的功能。
也就是说，

- 它会实时地监测所有10.*的路由，一旦系统中出现这样的路由，它会马上将其
  删除，只允许自己的10.0.0.0路由；

- 一旦发现有人改了10.*的路由的优先级也就是metric参数，它会马上将其改回来。

问题就出来了，我们的办公室内网也是10.*的一个网段，连上VPN以后就没法用了。
或许你会说，改一下我们的办公室内网网段，并跟VPN在一起受影响，不就没事了
吗。的确是这样的，但是那样做影响面太大了，是不可行的。但是从这个思路出
发，我们可以转接一个路由器，从10.*的这个内网再转接出一个比如
192.168.2.*的内网（选2.*而不是1.*是为了一跟外网冲突），也是可以解决无法
同时上vpn和内网的问题的；但是也会引发其他问题，并且需要额外的硬件。

另外，此vpn软件的路由绑架算法好像有bug，并不是总能绑架成功，所以有的同
事也曾发现有时vpn和内网什么也不用做也可以同时用。


** 解决办法

从 [[http://www.digitalinternals.com/124/20090430/workaround-for-juniper-vpn-split-tunneling-restriction/][这个网页]] 查到，可以对vpn程序打一个binary的patch，把它的路由监测代码逻辑给disable掉，

* 更新

上面说的vpn绑架路由问题这样是无法解决的，我也忘记之前怎么搞的了（现在我知道了，因为juniper的路由绑架逻辑本身有bug，有时会“罢工”）。后来网上查到发现必须打patch：

Hi, all

先看一下你这个文件的md5：

#+begin_example
md5sum.exe "C:\Program Files\Juniper Networks\Common Files\dsNcService.exe"
54e2cb6effea0e0180ff07268a0f8b4d *dsNcService.exe
#+end_example

如果是这个值的话，你可以对它编辑一下这个binary的patch：

#+begin_example
$bindiff dsNcService.exe.old dsNcService.exe.new
diff on pos 00015e6f:00015e6f 1:'u' 2:'\x90'
diff on pos 00015e70:00015e70 1:':' 2:'\x90'
dsNcService.exe.old has 0 remaining
dsNcService.exe.new has 0 remaining
#+end_example

也就是用hex编辑器打开，再把相应位置上的两个char都改成nop指令。注意备份，
并且改之前必须把相应juniper的系统服务停掉，否则写不了文件。

然后是改一下内网（网卡）和外网（wifi）的路由metric优先级：

#+begin_src sh
  route -p add 0.0.0.0 mask 0.0.0.0 10.21.128.2 METRIC 30 IF 10
  route -p add 0.0.0.0 mask 0.0.0.0 192.168.1.1 METRIC 1 IF 11
  route -p add 10.21.128.0 mask 255.255.255.0 0.0.0.0 METRIC 1 IF 10
#+end_src

这里-p选项意为重启保留。

注意：IF后面的网络设备号在各自的机器上可能不同，用route print可以看，我的
是这样的：

#+begin_example
===========================================================================
Interface List
 12...00 ff 50 50 1b 88 ......Juniper Network Connect Virtual Adapter
 11...08 11 96 49 3f 80 ......Intel(R) Centrino(R) Advanced-N 6205
 10...00 21 cc 6c b2 73 ......Intel(R) 82579LM Gigabit Network Connection
 18...08 00 27 00 a4 5f ......VirtualBox Host-Only Ethernet Adapter
#+end_example

也就是说11是wifi，10是以太网卡。

做完之后重启就搞定了，不需要每次启动后都执行脚本。

稍后会把我改之前和之后的.exe放到wiki相应页面附件里，如果你的.exe跟我的一
样的话直接用就好了。

.exe具体怎么改的参见：


