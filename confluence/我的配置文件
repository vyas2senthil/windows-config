h2. 在你开始之前

创建一个测试用的账号。这一步有可能很重要，你可能也有一些自己的特殊个人配置，不希望被我的配置直接覆盖了。所以建议你可以建立一个test帐户，再用这个账户登录进行下列的操作。

这样，如果最后你发现你不喜欢我的配置，那么你直接把这个账号删掉，重新用回自己的账号就行了。

其实你真的应该跟我一样，也把自己的配置文件用git/svn之类的管理起来，放在google-code/github上。只是要注意别把自己的一些密码什么的也给放到网络上:-)

这样，你永远不害怕自己的配置丢失，并且，你的配置会变得越来越顺手，因为你一直在积累。

h2. 下载

{code:sh}
cd ~/
git clone git://github.com/baohaojun/windows-config.git
{code}

我的配置文件一定要放在我的HOME目录底下，放在任何其他地方都是未经测试的。你可能认为这样的要求太苛刻、太过分，但是其实一点也不。因为所有的文件几乎都是需要放在一个固定位置下的，比如bash，大家写bash脚本的时候第一很几乎总是 {{#!/bin/bash}} 。这样做的原因，是因为可以省去很多不必要的麻烦。再比如.bashrc，也总是放在 {{\~}} 目录下，我的配置文件也包含了.bashrc，所以当然也要放在 {{\~}} 下。

当然，确切的说，我的东西都是放在 {{\~/windows-config/}} 底下，但是，很快我就会让它们出现在 {{\~}} 下的。

h2. 配置

{code:sh}
~/windows-config/bin/after-co-ln.sh
{code}

这一步就是把我所有的配置文件都软链接到 {{\~}} 下来。如果已经存在目标文件的话，我会先把目标文件做一个.bak的备份，所以不必太担心会丢失数据。

h3. 最后的配置

{code:sh}
~/bin/Linux/after-check-out.sh
{code}

这一步会做很多事情：

# 安装额外的.deb包。基本上这些包装完之后，你就可以开始android的开发了。所有的编译工具等都装上了。当然还有一些其他的我个人经常要用的软件。
# 下载一些有用的资源。比如，antlr，一种语言识别工具。我们要用Emacs来阅读源代码，针对java语言写的代码，我用antlr自己写了一个parser。
# 编译安装我自己的软件的版本，比如[beagle-grep|beagle-grep —— 非常快的代码搜索工具]，global等。
