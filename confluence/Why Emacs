做为一个程序员，我们既要看代码，又要写代码。能很好地满足这两个需求的，我觉得只有Emacs和Vim。

因为，我们不是随便看看，写写，而是很严肃地，很认真地，需要很有创造性地做这两件事。如果不是这些形容词，相信记事本就可以做到看、写代码这两件事了，不是吗。

事实上记事本这样的程序，基本上不能算做一个“文本”的编辑器。因为它并没有把“文本”和“二进制”很好的区分开来。

在Unix系统上，不管一个文件的内容是“文本”的还是“二进制”的，系统是无视这一点的，所有文件都只是一个“流”而已。一个“串”而已。

所谓的流或者串，意思就是一个一个的，连绵不断的。流或者串有开始，但是不一定有结束。所有普通文件都是有结束的，因为存储空间总是有限的，但是一些特殊文件，应该认为它们是无限的，比如 {{while true; do echo hello world; done}} 就会产生一个无限的流。

所以Unix系统的底层是没有“文本”和“二进制”的概念的。事实上，文本和二进制的讨论，只有对人类有意义，机器真的不关心什么文本还是二进制。都不过是一个流罢了。不过是一个 {{char []}} （字符数组）罢了。

但是在人类而言，文本跟二进制就是天壤之别。俗话说，“酒逢知己千杯少”，为什么呢？因为知己懂你，你也懂知己。文本就是这样，你可以很轻松的理解的就是文本。

为了方便理解，我们会赋予文本一些结构，让它变得更有序一些。这可能跟我们是上帝的子民有关。上帝从混沌中创造这个世界，不就是想让世界变得更有序吗？关于上帝与人，我们以后再说。

这里说的结构，比如我们写书会分出章、节、小节，这是一种树状的结构。比如我们在小节里还会分段落，段落里还会分成好几句，句子里还有从句，还有主主语、谓语和宾语。

这里说的是很容易理解的，因为我们从小的语言课里就会教这些知识。说的更深一点的话，我们会说到正则表达式和语法，那就是比较高深的计算机知识了。但所有这些特性都是一样非常重要的。它们是文本的本质。

到底是先有文本，还是先有人类呢？人类的出现是以什么为标志的呢？语言，写下来的就是文本。而语言是人跟动物最重要的区别之一吧？

好了，下面我告诉你，为什么只有Emacs（和Vi）是让人满意的编辑器。

因为，它们是最强的操作文本的工具。

记事本？呃，基本上用记事本打开一个文件后，你可以一眼看出，这是个文本文件还是个二进制文件。但它的功能基本到此为止了。你能用它操作正则表达式吗？语法？分段？从句子的开始跳到句子的结束？都不行。

好了，记事本是一个极端，另一个极端，则是类似于source insight/Eclipse/Visual Studio等专门的看/写代码的工具。

我认为这些工具比不上Emacs/Vi的原因，跟记事本刚好相反，它们站到了文本的“上面”。

我们可以这样排一个序，二进制->文本->代码。记事本是在二进制级别，并且无法进入其他级别。上面说的这些IDE工具，直接站到了代码级别，并且也很难回来进入文本级别。

只有Emacs/Vi，完美地站在朴素的文本层，并且可以轻易地对华丽丽的代码层提供强有力地支持。可以享受荣华富贵，也可以忍受艰苦贫寒。如果找对象的话，也要找这样的吧？

（Unix系统跟记事本一样，不区分二进制还是文本，但是区别是，Unix系统提供了向文本支持的可能，就是你自己写出使用Unix系统的文本处理软件就行了，比如grep/perl/emacs等。Unix是活的，厄，而记事本呢，你能扩展它吗？它就是个死的。而那些IDE，虽然提供一些可扩展性，但是跟Emacs比起来，简直就是小孩过家家。

真汉子，就要用Emacs。或者Vi。

下面就看看[Emacs的过人之处]吧。
