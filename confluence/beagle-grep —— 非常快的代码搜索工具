Grep是非常有用的工具，但是如果你要搜索的整个代码库非常大的话——比如kernel、android的代码，那么速度上就会有点让人无法忍受。我曾经在android的代码里grep readlink这个函数，结果花了大半个小时还没结束，最后只好Control-C中止了。（搜索这个函数的原因是因为它是一个“危险”函数，容易造成内存越界）。

Beagle是一个搜索引擎程序，源自于Apache项目的Lucene。在Ubuntu上可以直接用 {{apt-get install beagle}} 来安装它。在debian上不知道什么原因这个包被拿下了，但是也可以自己编译它。（而且在ubuntu上也建议不要自己安装，因为我们需要用一个做过修改的Beagle。所以只能自己编译）。

Windows下也有功能与beagle类似的软件，那就是windows live search；这些程序让你可以飞快地找到整台电脑里包含目标字词串的所有文件。它们会在后台索引你所有的文件（应该说是所有文本文件和那些能够提取有意义的文本的非文本文件，比如.pdf/.chm等，甚至压缩文件也会给你解压出来看看是不是包含文本文件并进行索引），把索引的结果放到数据库里，这样你想搜索一个字符串的时候，它做一个数据库查询就可以告诉你结果。

以下是beagle的一些很有用的功能简介：

# 查询文件内容是不是有包含特定单词。
# 查询文件名字是不是有包含特定单词。
# 查询文件属性是不是有包含特定单词。这里说的文件属性不是操作系统里的文件属性，如uid/gid/atime/ctime等，而是beagle代码里自定义的，比如mp3文件可以有词作者/曲作者/演唱者/歌词等属性。

h2. 将beagle与grep结合

结合的原理非常简单，之前我们在android里搜索readlink这个函数，只能所有文件都grep一遍，大概有两个G的文件，花的时间当然会很长，但是结合beagle，我们可以先用它查询一下，哪些文件包含readlink这个单词，这样一下就把两个G的文件范围缩小到几百个文件，大小也就几个M了，原先两个G要花1个小时的话，现在缩小1千倍，只要3.6秒钟就可以了！

beagle之所以能够跟grep结合使用，是因为它们都是很好地依照UNIX的设计思想写出来的软件，那就是do one thing, and do it well。其实我觉得这里面还隐含了一句话，那就是make it easy to cooperate with other software。

h2. 获取beagle-grep

参见[我的配置文件]

h2. 使用beagle-grep

{code:sh}
cd ~/src/android
mkbeagleidx
beagle-grep.sh -e readlink
{code}

mkbeagleidx是用来生成beagle文件索引的一个脚本，在android代码目录底下第一次运行这个脚本大概要花20分钟时间。在运行过一次后你也可以到某个子目录下运行，以便只更新这个目录下的代码索引。这样可以节省时间。

{{-l}} 参数可以用来只搜索文件名，不搜索文件内容。

{{-v和-p}} 参数可以用来细化搜索规则。

详情请阅读源代码:-)。
