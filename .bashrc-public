#!/bin/bash
export PATH=/home/bhj/external/bin/linux/ext/android-sdk-linux_86/tools/ndk/android-ndk-r4b:$HOME/bin:$PATH:/home/bhj/bin/linux/ext/arm-eabi-4.4.0/bin:/home/bhj/external/bin/linux/ext/arm-2010q1/bin:/home/bhj/external/bin/linux/ext/arm-linux-4.1.1/bin
export EDITOR=edit-wait

if test -z "$SSH_CLIENT"; then
    HOSTNAME=`hostname`
    export PS1='\n[01;34m{ [01;31m'`whoami`'[01;34m@[01;33m'$HOSTNAME'[01;34m [01;32m'\$PWD'[01;34m '\$PROMPT_RET\$RECURSIVE_SHELL'}[0m\n\$'
else
    export LOCALIP=`echo $SSH_CONNECTION|awk '{print $3}'|sed -e 's/.*://'`
    export LOCALPORT=`echo $SSH_CONNECTION|awk '{print $4}'`
    export WHOAMI=`whoami`
    export REMOTEIP=`echo ${SSH_CLIENT} | awk '{print $1}'|perl -npe 's/.*://'`
    export DISPLAY=${DISPLAY:-$REMOTEIP:0.0}
    export PS1HostName=`hostname`
    export PS1='\n( \u@$PS1HostName [01;32m| \w |[0m [01;34mRemote[01;31m:[01;34mTrue '\$PROMPT_RET\$RECURSIVE_SHELL'[0m)\n\$'
    alias sudoedit='WHOAMI=root edit'
    if test "$TERM" = dumb; then
        export PS1='\$'
    fi
fi

alias rm='rm -i'
alias mkgtags='mkgtags -i -v'
alias bcd=cd_beagrep
alias pcd='builtin cd -P'
alias mail=mailx

cd_beagrep() 
{
    if test $# = 1; then
	dir=$(readlink -f "$1")
	cd ~/tmp/for-code-reading/chm/"$dir"
	return
    fi

    dest=~/tmp/for-code-reading/`pwd`
    while test ! -d "$dest"/.beagrep -a ! -e "$dest"/GPATH -a "$dest" != / -a "$dest" != ""; do
        dest=${dest%/*};
    done
    if test "$dest" = / -o "$dest" = ""; then
        echo 'You have not run for-code-reading yet, please run it first!'
        return 1;
    else
        cd_ok "$dest"
        return 0
    fi
}

cd_ok()
{
    builtin cd "$@"
    return 0
}


cdr()
{
    if [[ "$PWD" =~ ^$HOME/smb/ ]]; then
        local pat=$HOME/smb/
        local rep=smb://
        history -s cd "${PWD/$pat/$rep}"
    else
        history -s cd "$(printf %q "`pwd`")"
    fi
}



git()
{

    (
	if test "`readlink -f .`" = "`readlink -f ~`" -a "$1" != clone
	then
            cd ~/windows-config/;
	fi

	if test "$1" = st -a "$2" = -S; then
	    command git status -s | perl -ne '
chomp(); 
$_ = substr($_, 3); 
if (m/^"/) { 
    $_ = eval($_);
}
print $_ . "\n";
'
	  exit
	fi
    
	command git "$@"
    )

}

rbranch()
{
    repo forall . -c 'echo $REPO_RREV'
}

if tty -s; then
    stty -ixon -ixoff >/dev/null 2>&1
fi

if test $(echo "$BASH_VERSION"|sed -e 's,\..*,,') -ge 4 -a "$BASH" = /bin/bash; then
    . ~/.bashrc-public-bash
fi

scd()
{
    if test $# = 1; then
        if pwd|grep -q -e "$1"; then
            scd "$1" ''
            return $?
        fi
            

        for dir in $(lookup_file "$1"|tee /dev/stderr); do
            dir=$(echo "$dir" | perl -npe 's,/./,/,g')
            basedir=$(common-path "$PWD" "$dir")
            stem="${dir:${#basedir}+1}"
            
            dir1=$(pwd | perl -npe 's,('$basedir'/)(.*?)(/|$),$1'$stem'/,')
            if test -e  "$dir1"; then
                cd "$dir1" && break
            else
                cd "$(pwd | perl -npe 's,('$basedir'/),$1'$stem'/,')" && break
            fi
        done
    else
        dir1=$(pwd | perl -npe 's#'"$1"'#'"$2"'#g')
        test -d "$dir1" && { cd "$dir1"; return; }
        
        dir=$(lookup_file "$1"|tee /dev/stderr|head -n 1)
        shift
        dir=$(builtin cd "$dir"; lookup_file "$1"|tee /dev/stderr|head -n 1)
        dir=$(formal-path "$dir")
        basedir=$(dirname "$dir")
        stem=$(basename "$dir")
        
        cd "$(pwd | perl -npe 's,('$basedir'/)(.*?)(/|$),$1'$stem'/,')"
    fi
}
export EMAIL=baohaojun@gmail.com
