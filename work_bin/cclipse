#!/bin/bash 

function Usage()
{
    echo Usage: $0 [options] element_files
    echo
    echo Main options:
    echo -e -r \\t\\t reverse clipse, that is, show the version in the vob, or else, the files is eclipsed by -none in config_spec
    echo -e -t \\t\\t the backup file should be a file, or else it is a link to the real backup file in '$WORK_CODE'
    echo -e -R \\t\\t reverse all eclipsed files, by grepping '-none' in config_spec
    echo -e -l \\t\\t list all that is eclipsed by cclipse, by grepping '-none' in config_spec
    echo -e -B \\t\\t do not backup, maybe it is not a file, but a directory?
    echo -e -b \\t\\t do not backup, so that the file previously backuped will be used.
    echo -e -s \\t\\t use the file from svn
    echo -e -L \\t\\t use the file already in '$WORK_CODE', do not use replace it with the vob element.
    exit
}

function do_clipse()
{
    local IsDir=0


    ARG_SAVE="`readlink -f \"$1\" `"
    #echo try to eclipse "$ARG_SAVE"
    set -- `basename \`readlink -f "$1" \``

    cd `dirname "$ARG_SAVE" `

    if cleartool pwv -short -wdview|grep '\*\* NONE'; 
    then
        echo $0: view not set, exit...
        exit 1
    else 
        export WORK_CODE=$HOME/home/work-code-`cleartool pwv -short -wdview|tr -d '\r'`
    fi


    if cleartool ls -d `cygpath -alw "$ARG_SAVE"` 2>&1|grep 'cleartool: Error:'
        then  #maybe we just want to touch(1) the link, but we can only relink it:-)
        if [[ -f "$ARG_SAVE".loc ]]
            then 
            echo relink `cat "$ARG_SAVE".loc`
            ln -sf "$ARG_SAVE" `cat "$ARG_SAVE".loc`
        fi
        return
    fi

    if cleartool ls -d "$1"|grep '\[eclipsed\]'
	then 
	echo "$1" already eclipsed!
	return 
    fi

    if ! cleartool ls -d "$1"|egrep "$1"@@
	then 
	echo "$1" is not a vob element!
        ln -sf `readlink -f "$1"` "$1"
	return
    fi

    #backup the vob file first, if necessary
    if [[ -d "$1" ]]
	then IsDir=1
    fi
    
    if (($NoBackup==1)) || [[ -d "$1" ]]
	then
	echo not backing it up!
    else
	
	if ! [[ -d "$WORK_CODE" ]]
	    then 
	    rm -rf "$WORK_CODE"
	    mkdir "$WORK_CODE"
	fi

	if (($USELINK==0))
	    then
	    tmpfile=`mktemp -u /tmp/tmp.XXXXXXXX`
	else
	    tmpfile="$WORK_CODE"/`basename $1`
	    echo "$ARG_SAVE" >$tmpfile.loc
	    cp "$1" $tmpfile.org
	fi

	if [[ $do_not_overwrite = 0 ]]; then
	    cp "$1" $tmpfile -i
	fi



	chmod +w $tmpfile
    fi

    #add the -none rule to the config spec
    csfile=`mktemp /tmp/tmp.XXXXXXXX`
    echo element `readlink -f "$1"|perl -npe 's"^/.*?/.*?/".../"'` -none >$csfile
    cleartool catcs >>$csfile
    cleartool setcs `cygpath -alw $csfile`
    rm $csfile -f 

    #resurrect the vob file, but this time it's a private object
    if (($NoBackup==0)) && ! (($IsDir==1))
	then 
	if (($USELINK==0))
	    then
	    cp $tmpfile "$1"
	    rm $tmpfile -f
	else
	    ln -s $tmpfile "$1"
	fi
    fi
}

function do_reverse_clipse()
{
    echo try to reverse "$@"
    if ! cleartool ls -d "$1"|egrep '\[eclipsed\]|\[no version'
	then 
	echo "$1" not eclipsed!
	return
    fi
    
    rm "$1" -f

    csfile=`mktemp /tmp/tmp.XXXXXXXX`
    cleartool catcs|egrep $1'[[:blank:]]+-none$' -v >$csfile
    cleartool setcs `cygpath -alw $csfile`
    rm -f $csfile

    if [[ $SVN_USE == 1 ]]; then 
	tmpfile="$WORK_CODE"/`basename $1`
	if ! [[ -f "$tmpfile" ]]; then 
	    return
	fi
	cleartool co -nc "$1"
	cp "$tmpfile" "$1"
	echo $tmpfile used to replace the vob file
    fi
}

Doit=do_clipse

TERMS=`getopt -o rRtlBsL -- "$@"`

export USELINK=1
export ReverseAll=0
export NoBackup=0
export SVN_USE=0
export do_not_overwrite=0

eval set -- "$TERMS"

while true; do
    case "$1" in 
	-r)
	    Doit=do_reverse_clipse
	    shift
	    ;;
	-R)
	    Doit=do_reverse_clipse
	    export ReverseAll=1
	    shift
	    ;;
	-t) 
	    export USELINK=0
	    shift
	    ;;
	-l)
	    cleartool catcs|grep -- '-none'|awk '{print $2}'
	    exit
	    ;;
	-B)
	    export NoBackup=1
	    shift
	    ;;
	-s) 
	    export SVN_USE=1
	    shift
	    ;;
	-L) 
	    export do_not_overwrite=1
	    shift
	    ;;
	--) 
	    shift 
	    break
	    ;;
	*)
	    echo "Internal error!"
	    exit 1;
	    ;;
    esac
done

if (($ReverseAll==1))
    then eval set -- `cleartool catcs|grep -- '-none'|awk '{print $2}'`
fi

if (($#==0)); then Usage; fi
for arg do $Doit "$arg"; done

